{
    "aws": {
        "description": "GStreamer Amazon Web Services plugin",
        "elements": {
            "awspolly": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Text to Speech filter, using AWS polly",
                "hierarchy": [
                    "GstAwsPolly",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Audio/Text/Filter",
                "pad-templates": {
                    "sink": {
                        "caps": "text/x-raw:\n         format: utf8\napplication/ssml+xml:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: 16000\n       channels: 1\n         layout: interleaved\n         format: S16LE\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "access-key": {
                        "blurb": "AWS Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "engine": {
                        "blurb": "Defines what engine to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "neural (1)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstAwsPollyEngine",
                        "writable": true
                    },
                    "language-code": {
                        "blurb": "Defines what language code to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstAwsPollyLanguageCode",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Amount of milliseconds to allow AWS Polly",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "lexicon-names": {
                        "blurb": "List of lexicon names to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    },
                    "max-overflow": {
                        "blurb": "Amount of milliseconds any given text cue is allowed to overflow its intended duration. Only used with mode=compress",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "overflow": {
                        "blurb": "Defines how output audio with a longer duration than input text should be handled",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "clip (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstAwsOverflow",
                        "writable": true
                    },
                    "secret-access-key": {
                        "blurb": "AWS Secret Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "session-token": {
                        "blurb": "AWS temporary Session Token from STS",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "ssml-set-max-duration": {
                        "blurb": "Wrap plain text as SSML and set the max-duration attribute",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "voice-id": {
                        "blurb": "Defines what voice id to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "aria (2)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstAwsPollyVoiceId",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "awss3hlssink": {
                "author": "Daily. Co",
                "description": "Streams HLS data to S3",
                "hierarchy": [
                    "GstAwsS3HlsSink",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic",
                "long-name": "S3 HLS Sink",
                "pad-templates": {
                    "audio": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "video": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    }
                },
                "properties": {
                    "access-key": {
                        "blurb": "AWS Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "acl": {
                        "blurb": "Canned ACL to use for uploading to S3",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "private",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "bucket": {
                        "blurb": "The bucket of the file to write",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "endpoint-uri": {
                        "blurb": "The S3 endpoint URI to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "force-path-style": {
                        "blurb": "Force client to use path-style addressing for buckets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "hlssink": {
                        "blurb": "The underlying HLS sink being used",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": false
                    },
                    "key-prefix": {
                        "blurb": "The key prefix for segment and playlist files",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "region": {
                        "blurb": "The AWS region for the S3 bucket (e.g. eu-west-2).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "us-west-2",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "request-timeout": {
                        "blurb": "Timeout for request to S3 service (in ms)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15000",
                        "max": "18446744073709551615",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "retry-attempts": {
                        "blurb": "Number of times AWS SDK attempts a request before abandoning the request",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5",
                        "max": "10",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "secret-access-key": {
                        "blurb": "AWS Secret Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "session-token": {
                        "blurb": "AWS temporary session token from STS",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Various statistics",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "stats, num-uploads-started=(int)0, num-uploads-completed=(int)0, num-bytes-uploaded=(int)0;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    }
                },
                "rank": "none"
            },
            "awss3putobjectsink": {
                "author": "Arun Raghavan <arun@asymptotic.io>",
                "description": "Writes an object to Amazon S3 using PutObject (mostly useful for small files)",
                "hierarchy": [
                    "GstAwsS3PutObjectSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Network",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "access-key": {
                        "blurb": "AWS Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "bucket": {
                        "blurb": "The bucket of the file to write",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "cache-control": {
                        "blurb": "Cache-Control header to set for uploaded object",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "content-disposition": {
                        "blurb": "Content-Disposition header to set for uploaded object",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "content-encoding": {
                        "blurb": "Content-Encoding header to set for uploaded object",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "content-language": {
                        "blurb": "Content-Language header to set for uploaded object",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "content-type": {
                        "blurb": "Content-Type header to set for uploaded object",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "endpoint-uri": {
                        "blurb": "The S3 endpoint URI to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "flush-interval-buffers": {
                        "blurb": "Number of buffers to accumulate before doing a write (0 => disable)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "flush-interval-bytes": {
                        "blurb": "Number of bytes to accumulate before doing a write (0 => disable)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "flush-interval-time": {
                        "blurb": "Total duration of buffers to accumulate before doing a write (0 => disable)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "flush-on-error": {
                        "blurb": "Whether to write out the data on error (like stopping without an EOS)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "force-path-style": {
                        "blurb": "Force client to use path-style addressing for buckets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "key": {
                        "blurb": "The key of the file to write",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "metadata": {
                        "blurb": "A map of metadata to store with the object in S3; field values need to be convertible to strings.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "min-keyframe-distance": {
                        "blurb": "Minimum distance between keyframes to start a new file",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10000000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "next-file": {
                        "blurb": "When to start new file",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "next-buffer (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstS3PutObjectSinkNextFile",
                        "writable": true
                    },
                    "region": {
                        "blurb": "An AWS region (e.g. eu-west-2).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "us-west-2",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "request-timeout": {
                        "blurb": "Timeout for general S3 requests (in ms, set to -1 for infinity)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15000",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "retry-attempts": {
                        "blurb": "Number of times AWS SDK attempts a request before abandoning the request",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5",
                        "max": "10",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "s3-uri": {
                        "blurb": "The S3 compatible URI or S3 Access Point URI to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "secret-access-key": {
                        "blurb": "AWS Secret Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "session-token": {
                        "blurb": "AWS temporary Session Token from STS",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "uri": {
                        "blurb": "The S3 object URI",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "awss3sink": {
                "author": "Marcin Kolny <mkolny@amazon.com>",
                "description": "Writes an object to Amazon S3",
                "hierarchy": [
                    "GstAwsS3Sink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Source/Network",
                "long-name": "Amazon S3 sink",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "access-key": {
                        "blurb": "AWS Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "bucket": {
                        "blurb": "The bucket of the file to write",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "cache-control": {
                        "blurb": "Cache-Control header to set for uploaded object",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "complete-upload-request-timeout": {
                        "blurb": "Timeout for the complete multipart upload request (in ms, set to -1 for infinity) (Deprecated. Use request-timeout.)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15000",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "complete-upload-retry-duration": {
                        "blurb": "How long we should retry complete multipart upload requests before giving up (in ms, set to -1 for infinity) (Deprecated. Use retry-attempts.)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "75000",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "content-disposition": {
                        "blurb": "Content-Disposition header to set for uploaded object",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "content-encoding": {
                        "blurb": "Content-Encoding header to set for uploaded object",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "content-language": {
                        "blurb": "Content-Language header to set for uploaded object",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "content-type": {
                        "blurb": "Content-Type header to set for uploaded object",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "endpoint-uri": {
                        "blurb": "The S3 endpoint URI to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "force-path-style": {
                        "blurb": "Force client to use path-style addressing for buckets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "key": {
                        "blurb": "The key of the file to write",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "metadata": {
                        "blurb": "A map of metadata to store with the object in S3; field values need to be convertible to strings.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "on-error": {
                        "blurb": "Do nothing, abort or complete a multipart upload request on error",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "nothing (2)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstS3SinkOnError",
                        "writable": true
                    },
                    "part-size": {
                        "blurb": "A size (in bytes) of an individual part used for multipart upload.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5242880",
                        "max": "5368709120",
                        "min": "5242880",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "region": {
                        "blurb": "An AWS region (e.g. eu-west-2).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "us-west-2",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "request-timeout": {
                        "blurb": "Timeout for general S3 requests (in ms, set to -1 for infinity)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15000",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "retry-attempts": {
                        "blurb": "Number of times AWS SDK attempts a request before abandoning the request",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5",
                        "max": "10",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "retry-duration": {
                        "blurb": "How long we should retry general S3 requests before giving up (in ms, set to -1 for infinity) (Deprecated. Use retry-attempts.)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "75000",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "s3-uri": {
                        "blurb": "The S3 compatible URI or S3 Access Point URI to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "secret-access-key": {
                        "blurb": "AWS Secret Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "session-token": {
                        "blurb": "AWS temporary Session Token from STS",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "upload-part-request-timeout": {
                        "blurb": "Timeout for a single upload part request (in ms, set to -1 for infinity) (Deprecated. Use request-timeout.)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15000",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "upload-part-retry-duration": {
                        "blurb": "How long we should retry upload part requests before giving up (in ms, set to -1 for infinity) (Deprecated. Use retry-attempts.)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "75000",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "uri": {
                        "blurb": "The S3 object URI",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "awss3src": {
                "author": "Arun Raghavan <arun@arunraghavan.net>",
                "description": "Reads an object from Amazon S3",
                "hierarchy": [
                    "GstAwsS3Src",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Source/Network",
                "long-name": "Amazon S3 source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "access-key": {
                        "blurb": "AWS Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "endpoint-uri": {
                        "blurb": "The S3 endpoint URI to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "force-path-style": {
                        "blurb": "Force client to use path-style addressing for buckets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "request-timeout": {
                        "blurb": "Timeout for each S3 request (in ms, set to -1 for infinity)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15000",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "retry-attempts": {
                        "blurb": "Number of times AWS SDK attempts a request before abandoning the request",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5",
                        "max": "10",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "retry-duration": {
                        "blurb": "How long we should retry S3 requests before giving up (in ms, set to -1 for infinity) (Deprecated. Use retry-attempts.)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "75000",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "s3-uri": {
                        "blurb": "The S3 compatible URI or S3 Access Point URI to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "secret-access-key": {
                        "blurb": "AWS Secret Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "session-token": {
                        "blurb": "AWS temporary Session Token from STS",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "uri": {
                        "blurb": "The S3 object URI",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "awstranscribeparse": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Parses AWS transcripts into timed text buffers",
                "hierarchy": [
                    "GstAwsTranscribeParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Text/Subtitle",
                "long-name": "AWS transcript parser",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-json:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            },
            "awstranscriber": {
                "author": "Jordan Petridis <jordan@centricular.com>, Mathieu Duponchelle <mathieu@centricular.com>, François Laignel <francois@centricular.com>",
                "description": "Speech to Text filter, using AWS transcribe",
                "hierarchy": [
                    "GstAwsTranscriber",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Audio/Text/Filter",
                "long-name": "Transcriber",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: [ 8000, 48000 ]\n       channels: 1\n         layout: { (string)interleaved, (string)non-interleaved }\n         format: S16LE\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "src",
                        "presence": "always",
                        "type": "GstTranslateSrcPad"
                    },
                    "src_%%u": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "src",
                        "presence": "request",
                        "type": "GstTranslateSrcPad"
                    },
                    "translate_src_%%u": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "src",
                        "presence": "request",
                        "type": "GstTranslateSrcPad"
                    },
                    "unsynced_src": {
                        "caps": "application/x-json:\n",
                        "direction": "src",
                        "presence": "always"
                    },
                    "unsynced_translate_src_%%u": {
                        "caps": "application/x-json:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "access-key": {
                        "blurb": "AWS Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "language-code": {
                        "blurb": "The Language of the Stream, see <https://docs.aws.amazon.com/transcribe/latest/dg/how-streaming-transcription.html> for an up to date list of allowed languages",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "en-US",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Amount of milliseconds to allow AWS transcribe (Deprecated. Use transcribe-latency)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "8000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "lateness": {
                        "blurb": "Amount of milliseconds to introduce as lateness",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "results-stability": {
                        "blurb": "Defines how fast results should stabilize",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "low (2)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstAwsTranscriberResultStability",
                        "writable": true
                    },
                    "secret-access-key": {
                        "blurb": "AWS Secret Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "session-id": {
                        "blurb": "The ID of the transcription session, must be length 36",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "session-token": {
                        "blurb": "AWS temporary Session Token from STS",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "transcribe-latency": {
                        "blurb": "Amount of milliseconds to allow AWS transcribe",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "8000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "translate-latency": {
                        "blurb": "Amount of milliseconds to allow AWS translate (ignored if the input and output languages are the same)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "500",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "translate-lookahead": {
                        "blurb": "Maximum duration in milliseconds of transcript to lookahead before sending to translation when no separator was encountered",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "3000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "vocabulary-filter-method": {
                        "blurb": "Defines how filtered words will be edited, has no effect when vocabulary-filter-name isn't set",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "mask (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstAwsTranscriberVocabularyFilterMethod",
                        "writable": true
                    },
                    "vocabulary-filter-name": {
                        "blurb": "The name of a custom filter vocabulary, see <https://docs.aws.amazon.com/transcribe/latest/help-panel/vocab-filter.html> for more information",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "vocabulary-name": {
                        "blurb": "The name of a custom vocabulary, see <https://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary.html> for more information",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "awstranscriber2": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Speech to Text filter, using AWS transcribe",
                "hierarchy": [
                    "GstAwsTranscriber2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Audio/Text/Filter",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: 48000\n       channels: 1\n         layout: { (string)interleaved, (string)non-interleaved }\n         format: S16LE\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "access-key": {
                        "blurb": "AWS Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "language-code": {
                        "blurb": "The Language of the Stream, see <https://docs.aws.amazon.com/transcribe/latest/dg/how-streaming-transcription.html> for an up to date list of allowed languages",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "en-US",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Amount of milliseconds to allow AWS transcribe",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "lateness": {
                        "blurb": "Amount of milliseconds to introduce as lateness",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-observed-delay": {
                        "blurb": "Maximum delay observed between the sending of an audio sample and the reception of an item",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "results-stability": {
                        "blurb": "Defines how fast results should stabilize",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "low (2)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstAwsTranscriberResultStability",
                        "writable": true
                    },
                    "secret-access-key": {
                        "blurb": "AWS Secret Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "session-id": {
                        "blurb": "The ID of the transcription session, must be length 36",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "session-token": {
                        "blurb": "AWS temporary Session Token from STS",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "show-speaker-label": {
                        "blurb": "Defines whether to partition speakers in the transcription output",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "vocabulary-filter-method": {
                        "blurb": "Defines how filtered words will be edited, has no effect when vocabulary-filter-name isn't set",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "mask (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstAwsTranscriberVocabularyFilterMethod",
                        "writable": true
                    },
                    "vocabulary-filter-name": {
                        "blurb": "The name of a custom filter vocabulary, see <https://docs.aws.amazon.com/transcribe/latest/help-panel/vocab-filter.html> for more information",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "vocabulary-name": {
                        "blurb": "The name of a custom vocabulary, see <https://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary.html> for more information",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "awstranslate": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Translates text",
                "hierarchy": [
                    "GstAwsTranslate",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Text/Filter",
                "pad-templates": {
                    "sink": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "access-key": {
                        "blurb": "AWS Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "accumulator-lateness": {
                        "blurb": "By how much to shift input timestamps forward",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "brevity-on": {
                        "blurb": "Whether brevity should be turned on",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "input-language-code": {
                        "blurb": "The Language of the input stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "en-US",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Amount of milliseconds to allow AWS translate",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "output-language-code": {
                        "blurb": "The Language of the output stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "fr-FR",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "secret-access-key": {
                        "blurb": "AWS Secret Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "session-token": {
                        "blurb": "AWS temporary Session Token from STS",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "tokenization-method": {
                        "blurb": "The tokenization method to apply",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "span-based (1)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstAwsTranscriberTranslationTokenizationMethod",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstaws",
        "license": "MPL",
        "other-types": {
            "GstAwsOverflow": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Clip",
                        "name": "clip",
                        "value": "0"
                    },
                    {
                        "desc": "Overlap",
                        "name": "overlap",
                        "value": "1"
                    },
                    {
                        "desc": "Shift",
                        "name": "shift",
                        "value": "2"
                    }
                ]
            },
            "GstAwsPollyEngine": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Standard",
                        "name": "standard",
                        "value": "0"
                    },
                    {
                        "desc": "Neural",
                        "name": "neural",
                        "value": "1"
                    }
                ]
            },
            "GstAwsPollyLanguageCode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "None",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "Arb",
                        "name": "arb",
                        "value": "1"
                    },
                    {
                        "desc": "CaEs",
                        "name": "ca-ES",
                        "value": "2"
                    },
                    {
                        "desc": "CmnCn",
                        "name": "cmn-CN",
                        "value": "3"
                    },
                    {
                        "desc": "CyGb",
                        "name": "cy-GB",
                        "value": "4"
                    },
                    {
                        "desc": "DaDk",
                        "name": "da-DK",
                        "value": "5"
                    },
                    {
                        "desc": "DeAt",
                        "name": "de-AT",
                        "value": "6"
                    },
                    {
                        "desc": "DeDe",
                        "name": "de-DE",
                        "value": "7"
                    },
                    {
                        "desc": "EnAu",
                        "name": "en-AU",
                        "value": "8"
                    },
                    {
                        "desc": "EnGb",
                        "name": "en-GB",
                        "value": "9"
                    },
                    {
                        "desc": "EnGbWls",
                        "name": "en-GB-WLS",
                        "value": "10"
                    },
                    {
                        "desc": "EnIn",
                        "name": "en-IN",
                        "value": "11"
                    },
                    {
                        "desc": "EnNz",
                        "name": "en-NZ",
                        "value": "12"
                    },
                    {
                        "desc": "EnUs",
                        "name": "en-US",
                        "value": "13"
                    },
                    {
                        "desc": "EnZa",
                        "name": "en-ZA",
                        "value": "14"
                    },
                    {
                        "desc": "EsEs",
                        "name": "es-ES",
                        "value": "15"
                    },
                    {
                        "desc": "EsMx",
                        "name": "es-MX",
                        "value": "16"
                    },
                    {
                        "desc": "EsUs",
                        "name": "es-US",
                        "value": "17"
                    },
                    {
                        "desc": "FrCa",
                        "name": "fr-CA",
                        "value": "18"
                    },
                    {
                        "desc": "FrFr",
                        "name": "fr-FR",
                        "value": "19"
                    },
                    {
                        "desc": "HiIn",
                        "name": "hi-IN",
                        "value": "20"
                    },
                    {
                        "desc": "IsIs",
                        "name": "is-IS",
                        "value": "21"
                    },
                    {
                        "desc": "ItIt",
                        "name": "it-IT",
                        "value": "22"
                    },
                    {
                        "desc": "JaJp",
                        "name": "ja-JP",
                        "value": "23"
                    },
                    {
                        "desc": "KoKr",
                        "name": "ko-KR",
                        "value": "24"
                    },
                    {
                        "desc": "NbNo",
                        "name": "nb-NO",
                        "value": "25"
                    },
                    {
                        "desc": "NlNl",
                        "name": "nl-NL",
                        "value": "26"
                    },
                    {
                        "desc": "PlPl",
                        "name": "pl-PL",
                        "value": "27"
                    },
                    {
                        "desc": "PtBr",
                        "name": "pt-BR",
                        "value": "28"
                    },
                    {
                        "desc": "PtPt",
                        "name": "pt-PT",
                        "value": "29"
                    },
                    {
                        "desc": "RoRo",
                        "name": "ro-RO",
                        "value": "30"
                    },
                    {
                        "desc": "RuRu",
                        "name": "ru-RU",
                        "value": "31"
                    },
                    {
                        "desc": "SvSe",
                        "name": "sv-SE",
                        "value": "32"
                    },
                    {
                        "desc": "TrTr",
                        "name": "tr-TR",
                        "value": "33"
                    },
                    {
                        "desc": "YueCn",
                        "name": "yue-CN",
                        "value": "34"
                    }
                ]
            },
            "GstAwsPollyVoiceId": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Aditi",
                        "name": "aditi",
                        "value": "0"
                    },
                    {
                        "desc": "Amy",
                        "name": "amy",
                        "value": "1"
                    },
                    {
                        "desc": "Aria",
                        "name": "aria",
                        "value": "2"
                    },
                    {
                        "desc": "Arlet",
                        "name": "arlet",
                        "value": "3"
                    },
                    {
                        "desc": "Arthur",
                        "name": "arthur",
                        "value": "4"
                    },
                    {
                        "desc": "Astrid",
                        "name": "astrid",
                        "value": "5"
                    },
                    {
                        "desc": "Ayanda",
                        "name": "ayanda",
                        "value": "6"
                    },
                    {
                        "desc": "Bianca",
                        "name": "bianca",
                        "value": "7"
                    },
                    {
                        "desc": "Brian",
                        "name": "brian",
                        "value": "8"
                    },
                    {
                        "desc": "Camila",
                        "name": "camila",
                        "value": "9"
                    },
                    {
                        "desc": "Carla",
                        "name": "carla",
                        "value": "10"
                    },
                    {
                        "desc": "Carmen",
                        "name": "carmen",
                        "value": "11"
                    },
                    {
                        "desc": "Celine",
                        "name": "celine",
                        "value": "12"
                    },
                    {
                        "desc": "Chantal",
                        "name": "chantal",
                        "value": "13"
                    },
                    {
                        "desc": "Conchita",
                        "name": "conchita",
                        "value": "14"
                    },
                    {
                        "desc": "Cristiano",
                        "name": "cristiano",
                        "value": "15"
                    },
                    {
                        "desc": "Daniel",
                        "name": "daniel",
                        "value": "16"
                    },
                    {
                        "desc": "Dora",
                        "name": "dora",
                        "value": "17"
                    },
                    {
                        "desc": "Emma",
                        "name": "emma",
                        "value": "18"
                    },
                    {
                        "desc": "Enrique",
                        "name": "enrique",
                        "value": "19"
                    },
                    {
                        "desc": "Ewa",
                        "name": "ewa",
                        "value": "20"
                    },
                    {
                        "desc": "Filiz",
                        "name": "filiz",
                        "value": "21"
                    },
                    {
                        "desc": "Gabrielle",
                        "name": "gabrielle",
                        "value": "22"
                    },
                    {
                        "desc": "Geraint",
                        "name": "geraint",
                        "value": "23"
                    },
                    {
                        "desc": "Giorgio",
                        "name": "giorgio",
                        "value": "24"
                    },
                    {
                        "desc": "Gwyneth",
                        "name": "gwyneth",
                        "value": "25"
                    },
                    {
                        "desc": "Hannah",
                        "name": "hannah",
                        "value": "26"
                    },
                    {
                        "desc": "Hans",
                        "name": "hans",
                        "value": "27"
                    },
                    {
                        "desc": "Hiujin",
                        "name": "hiujin",
                        "value": "28"
                    },
                    {
                        "desc": "Ines",
                        "name": "ines",
                        "value": "29"
                    },
                    {
                        "desc": "Ivy",
                        "name": "ivy",
                        "value": "30"
                    },
                    {
                        "desc": "Jacek",
                        "name": "jacek",
                        "value": "31"
                    },
                    {
                        "desc": "Jan",
                        "name": "jan",
                        "value": "32"
                    },
                    {
                        "desc": "Joanna",
                        "name": "joanna",
                        "value": "33"
                    },
                    {
                        "desc": "Joey",
                        "name": "joey",
                        "value": "34"
                    },
                    {
                        "desc": "Justin",
                        "name": "justin",
                        "value": "35"
                    },
                    {
                        "desc": "Kajal",
                        "name": "kajal",
                        "value": "36"
                    },
                    {
                        "desc": "Karl",
                        "name": "karl",
                        "value": "37"
                    },
                    {
                        "desc": "Kendra",
                        "name": "kendra",
                        "value": "38"
                    },
                    {
                        "desc": "Kevin",
                        "name": "kevin",
                        "value": "39"
                    },
                    {
                        "desc": "Kimberly",
                        "name": "kimberly",
                        "value": "40"
                    },
                    {
                        "desc": "Lea",
                        "name": "lea",
                        "value": "41"
                    },
                    {
                        "desc": "Liam",
                        "name": "liam",
                        "value": "42"
                    },
                    {
                        "desc": "Liv",
                        "name": "liv",
                        "value": "43"
                    },
                    {
                        "desc": "Lotte",
                        "name": "lotte",
                        "value": "44"
                    },
                    {
                        "desc": "Lucia",
                        "name": "lucia",
                        "value": "45"
                    },
                    {
                        "desc": "Lupe",
                        "name": "lupe",
                        "value": "46"
                    },
                    {
                        "desc": "Mads",
                        "name": "mads",
                        "value": "47"
                    },
                    {
                        "desc": "Maja",
                        "name": "maja",
                        "value": "48"
                    },
                    {
                        "desc": "Marlene",
                        "name": "marlene",
                        "value": "49"
                    },
                    {
                        "desc": "Mathieu",
                        "name": "mathieu",
                        "value": "50"
                    },
                    {
                        "desc": "Matthew",
                        "name": "matthew",
                        "value": "51"
                    },
                    {
                        "desc": "Maxim",
                        "name": "maxim",
                        "value": "52"
                    },
                    {
                        "desc": "Mia",
                        "name": "mia",
                        "value": "53"
                    },
                    {
                        "desc": "Miguel",
                        "name": "miguel",
                        "value": "54"
                    },
                    {
                        "desc": "Mizuki",
                        "name": "mizuki",
                        "value": "55"
                    },
                    {
                        "desc": "Naja",
                        "name": "naja",
                        "value": "56"
                    },
                    {
                        "desc": "Nicole",
                        "name": "nicole",
                        "value": "57"
                    },
                    {
                        "desc": "Olivia",
                        "name": "olivia",
                        "value": "58"
                    },
                    {
                        "desc": "Pedro",
                        "name": "pedro",
                        "value": "59"
                    },
                    {
                        "desc": "Penelope",
                        "name": "penelope",
                        "value": "60"
                    },
                    {
                        "desc": "Raveena",
                        "name": "raveena",
                        "value": "61"
                    },
                    {
                        "desc": "Ricardo",
                        "name": "ricardo",
                        "value": "62"
                    },
                    {
                        "desc": "Ruben",
                        "name": "ruben",
                        "value": "63"
                    },
                    {
                        "desc": "Russell",
                        "name": "russell",
                        "value": "64"
                    },
                    {
                        "desc": "Salli",
                        "name": "salli",
                        "value": "65"
                    },
                    {
                        "desc": "Seoyeon",
                        "name": "seoyeon",
                        "value": "66"
                    },
                    {
                        "desc": "Takumi",
                        "name": "takumi",
                        "value": "67"
                    },
                    {
                        "desc": "Tatyana",
                        "name": "tatyana",
                        "value": "68"
                    },
                    {
                        "desc": "Vicki",
                        "name": "vicki",
                        "value": "69"
                    },
                    {
                        "desc": "Vitoria",
                        "name": "vitoria",
                        "value": "70"
                    },
                    {
                        "desc": "Zeina",
                        "name": "zeina",
                        "value": "71"
                    },
                    {
                        "desc": "Zhiyu",
                        "name": "zhiyu",
                        "value": "72"
                    }
                ]
            },
            "GstAwsTranscriberResultStability": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "High: stabilize results as fast as possible",
                        "name": "high",
                        "value": "0"
                    },
                    {
                        "desc": "Medium: balance between stability and accuracy",
                        "name": "medium",
                        "value": "1"
                    },
                    {
                        "desc": "Low: relatively less stable partial transcription results with higher accuracy",
                        "name": "low",
                        "value": "2"
                    }
                ]
            },
            "GstAwsTranscriberTranslationTokenizationMethod": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "None: don't tokenize translations",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "Span based: insert spans in the transript text and use the resulting spans in the translations to reproduce speech pacing.",
                        "name": "span-based",
                        "value": "1"
                    }
                ]
            },
            "GstAwsTranscriberVocabularyFilterMethod": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Mask: replace words with ***",
                        "name": "mask",
                        "value": "0"
                    },
                    {
                        "desc": "Remove: delete words",
                        "name": "remove",
                        "value": "1"
                    },
                    {
                        "desc": "Tag: flag words without changing them",
                        "name": "tag",
                        "value": "2"
                    }
                ]
            },
            "GstS3PutObjectSinkNextFile": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "New file for each buffer",
                        "name": "next-buffer",
                        "value": "0"
                    },
                    {
                        "desc": "New file after each discontinuity",
                        "name": "next-discont",
                        "value": "1"
                    },
                    {
                        "desc": "New file at each key frame",
                        "name": "next-key-frame",
                        "value": "2"
                    },
                    {
                        "desc": "New file after a force key unit event",
                        "name": "next-key-unit-event",
                        "value": "3"
                    },
                    {
                        "desc": "New file when the configured maximum file size would be exceeded with the next buffer or buffer list",
                        "name": "next-max-size",
                        "value": "4"
                    },
                    {
                        "desc": "New file when the configured maximum duration would be exceeded with the next buffer or buffer list",
                        "name": "next-max-duration",
                        "value": "5"
                    }
                ]
            },
            "GstS3SinkOnError": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Abort: Abort multipart upload on error.",
                        "name": "abort",
                        "value": "0"
                    },
                    {
                        "desc": "Complete: Complete multipart upload on error.",
                        "name": "complete",
                        "value": "1"
                    },
                    {
                        "desc": "DoNothing: Do nothing on error.",
                        "name": "nothing",
                        "value": "2"
                    }
                ]
            },
            "GstTranslateSrcPad": {
                "hierarchy": [
                    "GstTranslateSrcPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "language-code": {
                        "blurb": "The Language the Stream must be translated to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "tokenization-method": {
                        "blurb": "The tokenization method to apply to translations",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstAwsTranscriberTranslationTokenizationMethod",
                        "writable": true
                    }
                }
            }
        },
        "package": "gst-plugin-aws",
        "source": "gst-plugin-aws",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "cdg": {
        "description": "GStreamer CDG codec Plugin",
        "elements": {
            "cdgdec": {
                "author": "Guillaume Desmottes <guillaume.desmottes@collabora.com>",
                "description": "CDG decoder",
                "hierarchy": [
                    "GstCdgDec",
                    "GstVideoDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Decoder/Video",
                "long-name": "CDG decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-cdg:\n         parsed: true\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: RGBA\n          width: 300\n         height: 216\n      framerate: 0/1\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            },
            "cdgparse": {
                "author": "Guillaume Desmottes <guillaume.desmottes@collabora.com>",
                "description": "CDG parser",
                "hierarchy": [
                    "GstCdgParse",
                    "GstBaseParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Parser/Video",
                "long-name": "CDG parser",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-cdg:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-cdg:\n          width: 300\n         height: 216\n      framerate: 0/1\n         parsed: true\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstcdg",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-cdg",
        "source": "gst-plugin-cdg",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "claxon": {
        "description": "GStreamer Claxon FLAC Decoder Plugin",
        "elements": {
            "claxondec": {
                "author": "Ruben Gonzalez <rgonzalez@fluendo.com>",
                "description": "Claxon FLAC decoder",
                "hierarchy": [
                    "GstClaxonDec",
                    "GstAudioDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Decoder/Audio",
                "long-name": "Claxon FLAC decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-flac:\n         framed: true\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 655349 ]\n       channels: [ 1, 7 ]\n         layout: interleaved\n         format: { S8, S16LE, S24_32LE, S32LE }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            }
        },
        "filename": "gstclaxon",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-claxon",
        "source": "gst-plugin-claxon",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "csound": {
        "description": "GStreamer Audio Filter plugin based on Csound",
        "elements": {
            "csoundfilter": {
                "author": "Natanael Mojica <neithanmo@gmail.com>",
                "description": "Implement an audio filter/effects using Csound",
                "hierarchy": [
                    "GstCsoundFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Audio filter",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: F64LE\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: F64LE\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "csd-text": {
                        "blurb": "The content of a csd file passed as a String.\n                    Use either location or csd-text but not both at the same time, if so and error would be triggered",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "location": {
                        "blurb": "Location of the csd file to be used by csound.\n                    Use either location or CSD-text but not both at the same time, if so and error would be triggered",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "loop": {
                        "blurb": "loop over the score (can be changed in PLAYING or PAUSED state)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "score-offset": {
                        "blurb": "Score offset in seconds to start the performance",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1.79769e+308",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstcsound",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-csound",
        "source": "gst-plugin-csound",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "dav1d": {
        "description": "GStreamer dav1d AV1 decoder Plugin",
        "elements": {
            "dav1ddec": {
                "author": "Philippe Normand <philn@igalia.com>",
                "description": "Decode AV1 video streams with dav1d",
                "hierarchy": [
                    "GstDav1dDec",
                    "GstVideoDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Video",
                "long-name": "Dav1d AV1 Decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-av1:\n  stream-format: obu-stream\n      alignment: { (string)frame, (string)tu }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { GRAY8, GRAY16_LE, I420, Y42B, Y444, I420_10LE, I422_10LE, Y444_10LE, I420_12LE, I422_12LE, Y444_12LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "apply-grain": {
                        "blurb": "Enable out-of-loop normative film grain filter",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "inloop-filters": {
                        "blurb": "Flags to enable in-loop post processing filters",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "(none)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstDav1dInloopFilterType",
                        "writable": true
                    },
                    "max-frame-delay": {
                        "blurb": "Maximum delay in frames for the decoder (set to 1 for low latency, 0 to be equal to the number of logical cores. -1 to choose between these two based on pipeline liveness)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "4294967295",
                        "min": "-1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "n-threads": {
                        "blurb": "Number of threads to use while decoding (set to 0 to use number of logical cores)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstdav1d",
        "license": "MIT/X11",
        "other-types": {
            "GstDav1dInloopFilterType": {
                "kind": "flags",
                "values": [
                    {
                        "desc": "Enable deblocking filter",
                        "name": "deblock",
                        "value": "0x00000001"
                    },
                    {
                        "desc": "Enable Constrained Directional Enhancement Filter",
                        "name": "cdef",
                        "value": "0x00000002"
                    },
                    {
                        "desc": "Enable loop restoration filter",
                        "name": "restoration",
                        "value": "0x00000004"
                    }
                ]
            }
        },
        "package": "gst-plugin-dav1d",
        "source": "gst-plugin-dav1d",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "deepgram": {
        "description": "GStreamer Deepgram plugin",
        "elements": {
            "deepgramtranscriber": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Speech to Text filter, using Deepgram streaming transcription API",
                "hierarchy": [
                    "GstDeepgramTranscriber",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Audio/Text/Filter",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: { (int)24000, (int)8000, (int)16000, (int)32000, (int)48000 }\n       channels: [ 1, 2147483647 ]\n         layout: { (string)interleaved, (string)non-interleaved }\n         format: S16LE\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "api-key": {
                        "blurb": "ElevenLabs API Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "diarization": {
                        "blurb": "Whether diarization should be enabled",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "interim-strategy": {
                        "blurb": "Defines how interim results should be used, if at all",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "index (1)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstDeepgramInterimStrategy",
                        "writable": true
                    },
                    "interim-timing-threshold": {
                        "blurb": "Amount of milliseconds to consider a word in an interim result new. Only used with interim-strategy=timing",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "40",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "language-code": {
                        "blurb": "The Language of the Stream, see <https://developers.deepgram.com/docs/language>",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "en",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Amount of milliseconds to allow AWS transcribe",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "lateness": {
                        "blurb": "Amount of milliseconds to introduce as lateness",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-observed-delay": {
                        "blurb": "Maximum delay observed between the sending of an audio sample and the reception of an item",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstdeepgram",
        "license": "MPL",
        "other-types": {
            "GstDeepgramInterimStrategy": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Disabled: don't use interim results",
                        "name": "disabled",
                        "value": "0"
                    },
                    {
                        "desc": "Index: track current word in interim results by index",
                        "name": "index",
                        "value": "1"
                    },
                    {
                        "desc": "Timing: track current word in interim results by timing",
                        "name": "timing",
                        "value": "2"
                    }
                ]
            }
        },
        "package": "gst-plugin-deepgram",
        "source": "gst-plugin-deepgram",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "elevenlabs": {
        "description": "GStreamer ElevenLabs plugin",
        "elements": {
            "elevenlabssynthesizer": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Text to Speech filter, using ElevenLabs",
                "hierarchy": [
                    "GstElevenLabsSynthesizer",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Audio/Text/Filter",
                "pad-templates": {
                    "sink": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: { (int)22050, (int)48000, (int)44100, (int)24000, (int)16000, (int)8000 }\n       channels: 1\n         layout: interleaved\n         format: S16LE\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "api-key": {
                        "blurb": "ElevenLabs API Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "language-code": {
                        "blurb": "An optional language code (ISO 639-1), useful with certain models",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Amount of milliseconds to allow ElevenLabs",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-overflow": {
                        "blurb": "Amount of milliseconds any given text cue is allowed to overflow its intended duration. Only used with mode=compress",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-previous-requests": {
                        "blurb": "How many previous request IDs to track, see https://elevenlabs.io/docs/api-reference/text-to-speech/convert#request.body.previous_request_ids",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "model-id": {
                        "blurb": "ElevenLabs Model ID, see https://help.elevenlabs.io/hc/en-us/articles/21811236079505-How-do-I-find-the-model-ID",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "eleven_flash_v2_5",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "overflow": {
                        "blurb": "Defines how output audio with a longer duration than input text should be handled",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "clip (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstElevenLabsOverflow",
                        "writable": true
                    },
                    "retry-with-speed": {
                        "blurb": "When synthesis results in larger duration, retry with higher speed",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "use-voice-id-events": {
                        "blurb": "Use received elevenlabs/speaker-voice events to pick the current voice",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "voice-id": {
                        "blurb": "ElevenLabs Voice ID, see https://elevenlabs.io/app/voice-library",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "9BWtsMINqrJLrRacOk9x",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "elevenlabsvoicecloner": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "ElevenLabs Voice Cloner",
                "hierarchy": [
                    "GstElevenLabsCloner",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Audio",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: S16LE\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: S16LE\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "api-key": {
                        "blurb": "ElevenLabs API Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "remove-background-noise": {
                        "blurb": "Whether to ask elevenlabs to remove background noise",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "segment-duration": {
                        "blurb": "Amount of milliseconds to store before creating / updating voice",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "speaker": {
                        "blurb": "Optional speaker name. When set the element will treat all audio as uttered by a single speaker and will not use rstranscribe/new-item events for diarization.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstelevenlabs",
        "license": "Proprietary",
        "other-types": {
            "GstElevenLabsOverflow": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Clip",
                        "name": "clip",
                        "value": "0"
                    },
                    {
                        "desc": "Overlap",
                        "name": "overlap",
                        "value": "1"
                    },
                    {
                        "desc": "Shift",
                        "name": "shift",
                        "value": "2"
                    }
                ]
            }
        },
        "package": "gst-plugin-elevenlabs",
        "source": "gst-plugin-elevenlabs",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "fallbackswitch": {
        "description": "GStreamer Fallback Switcher and Source Plugin",
        "elements": {
            "fallbacksrc": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Live source with uridecodebin3 or custom source, and fallback stream",
                "hierarchy": [
                    "GstFallbackSrc",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic/Source",
                "long-name": "Fallback Source",
                "pad-templates": {
                    "audio": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "audio_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "video": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "video_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "audio-caps": {
                        "blurb": "Audio caps on which to stop decoding",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "audio/x-raw(ANY)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "buffer-duration": {
                        "blurb": "Buffer duration when buffering streams (-1 default value)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775806",
                        "min": "-1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "dummy-audio-caps": {
                        "blurb": "Raw audio caps for dummy audio stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "ANY",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "dummy-video-caps": {
                        "blurb": "Raw video caps for dummy video stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "ANY",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "enable-audio": {
                        "blurb": "Enable the audio stream, this will output silence if there's no audio in the configured URI",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "enable-video": {
                        "blurb": "Enable the video stream, this will output black or the fallback video if there's no video in the configured URI",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "fallback-audio-caps": {
                        "blurb": "Raw audio caps for fallback stream (DEPRECATED)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "ANY",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "fallback-uri": {
                        "blurb": "Fallback URI to use for video in case the main stream doesn't work",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "fallback-video-caps": {
                        "blurb": "Raw video caps for fallback stream (DEPRECATED)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "ANY",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "immediate-fallback": {
                        "blurb": "Forward the fallback streams immediately at startup, when the primary streams are slow to start up and immediate output is required",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "manual-unblock": {
                        "blurb": "When enabled, the application must call the unblock signal, except for live streams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "min-latency": {
                        "blurb": "When the main source has a higher latency than the fallback source this allows to configure a minimum latency that would be configured if initially the fallback is enabled",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "restart-on-eos": {
                        "blurb": "Restart source on EOS",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "restart-timeout": {
                        "blurb": "Timeout for restarting an active source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5000000000",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "retry-timeout": {
                        "blurb": "Timeout for stopping after repeated failure",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "60000000000",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "source": {
                        "blurb": "Source to use instead of the URI",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "statistics": {
                        "blurb": "Various statistics",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-fallbacksrc-stats, num-retry=(guint64)0, num-fallback-retry=(guint64)0, last-retry-reason=(GstFallbackSourceRetryReason)none, last-fallback-retry-reason=(GstFallbackSourceRetryReason)none, buffering-percent=(int)100, fallback-buffering-percent=(int)100;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    },
                    "status": {
                        "blurb": "Current source status",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "stopped (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstFallbackSourceStatus",
                        "writable": false
                    },
                    "timeout": {
                        "blurb": "Timeout for switching to the fallback URI",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5000000000",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "uri": {
                        "blurb": "URI to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "video-caps": {
                        "blurb": "Video caps on which to stop decoding",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "video/x-raw(ANY)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "map-streams": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstStructure"
                            },
                            {
                                "name": "arg1",
                                "type": "GstStreamCollection"
                            },
                            {
                                "name": "arg2",
                                "type": "GstStreamCollection"
                            }
                        ],
                        "return-type": "GstStructure",
                        "when": "last"
                    },
                    "unblock": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "update-uri": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "gchararray",
                        "when": "last"
                    }
                }
            },
            "fallbackswitch": {
                "author": "Jan Schmidt <jan@centricular.com>",
                "description": "Priority-based automatic input selector element",
                "hierarchy": [
                    "GstFallbackSwitch",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic",
                "long-name": "Priority-based input selector",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstFallbackSwitchSinkPad"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "active-pad": {
                        "blurb": "Currently active pad",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstPad",
                        "writable": true
                    },
                    "auto-switch": {
                        "blurb": "Automatically switch pads (If true, use the priority pad property, otherwise manual selection via the active-pad property)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "immediate-fallback": {
                        "blurb": "Forward lower-priority streams immediately at startup, when the stream with priority 0 is slow to start up and immediate output is required",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Additional latency in live mode to allow upstream to take longer to produce buffers for the current position (in nanoseconds)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "min-upstream-latency": {
                        "blurb": "When sources with a higher latency are expected to be plugged in dynamically after the fallbackswitch has started playing, this allows overriding the minimum latency reported by the initial source(s). This is only taken into account when larger than the actually reported minimum latency. (nanoseconds)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "stop-on-eos": {
                        "blurb": "Stop forwarding buffers as soon as one input pad is eos",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "timeout": {
                        "blurb": "Timeout on an input before switching to a lower priority input.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000000000",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstfallbackswitch",
        "license": "MPL",
        "other-types": {
            "GstFallbackSourceStatus": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Stopped",
                        "name": "stopped",
                        "value": "0"
                    },
                    {
                        "desc": "Buffering",
                        "name": "buffering",
                        "value": "1"
                    },
                    {
                        "desc": "Retrying",
                        "name": "retrying",
                        "value": "2"
                    },
                    {
                        "desc": "Running",
                        "name": "running",
                        "value": "3"
                    }
                ]
            },
            "GstFallbackSwitchSinkPad": {
                "hierarchy": [
                    "GstFallbackSwitchSinkPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "is-healthy": {
                        "blurb": "Whether this stream is healthy",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": false
                    },
                    "priority": {
                        "blurb": "Selection priority for this stream (lower number has a higher priority)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                }
            }
        },
        "package": "gst-plugin-fallbackswitch",
        "source": "gst-plugin-fallbackswitch",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "ffv1": {
        "description": "GStreamer FFV1 Decoder Plugin",
        "elements": {
            "ffv1dec": {
                "author": "Arun Raghavan <arun@asymptotic.io>",
                "description": "Decode FFV1 video streams",
                "hierarchy": [
                    "GstFfv1Dec",
                    "GstVideoDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Video",
                "long-name": "FFV1 Decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-ffv:\n     ffvversion: 1\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { GRAY8, GRAY16_LE, GRAY16_BE, Y444, Y444_10LE, Y444_10BE, A444_10LE, A444_10BE, Y444_12LE, Y444_12BE, Y444_16LE, Y444_16BE, A420, Y42B, I422_10LE, I422_10BE, A422_10LE, A422_10BE, I422_12LE, I422_12BE, I420, I420_10LE, I420_10BE, I420_12LE, I420_12BE, GBRA, GBR, GBR_10LE, GBR_10BE, GBRA_10LE, GBRA_10BE, GBR_12LE, GBR_12BE, GBRA_12LE, GBRA_12BE, Y41B, YUV9 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstffv1",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-ffv1",
        "source": "gst-plugin-ffv1",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "gif": {
        "description": "GStreamer GIF plugin",
        "elements": {
            "gifenc": {
                "author": "Markus Ebner <info@ebner-markus.de>",
                "description": "GIF encoder",
                "hierarchy": [
                    "GstGifEnc",
                    "GstVideoEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset"
                ],
                "klass": "Encoder/Video",
                "long-name": "GIF encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { RGB, RGBA }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 1/1, 2147483599/21474836 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "image/gif:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "repeat": {
                        "blurb": "Repeat (-1 to loop forever, 0 .. n finite repetitions)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "65535",
                        "min": "-1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "speed": {
                        "blurb": "Speed (1 .. 30; higher value yields faster encoding)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "30",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstgif",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-gif",
        "source": "gst-plugin-gif",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "gopbuffer": {
        "description": "Store complete groups of pictures at a time",
        "elements": {
            "gopbuffer": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "GOP Buffer",
                "hierarchy": [
                    "GstGopBuffer",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Video",
                "pad-templates": {
                    "video_sink": {
                        "caps": "video/x-h264:\n  stream-format: { (string)avc, (string)avc3 }\n      alignment: au\nvideo/x-h265:\n  stream-format: { (string)hvc1, (string)hev1 }\n      alignment: au\nvideo/x-vp8:\nvideo/x-vp9:\nvideo/x-av1:\n  stream-format: obu-stream\n      alignment: tu\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "video_src": {
                        "caps": "video/x-h264:\n  stream-format: { (string)avc, (string)avc3 }\n      alignment: au\nvideo/x-h265:\n  stream-format: { (string)hvc1, (string)hev1 }\n      alignment: au\nvideo/x-vp8:\nvideo/x-vp9:\nvideo/x-av1:\n  stream-format: obu-stream\n      alignment: tu\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "max-size-time": {
                        "blurb": "The maximum duration to store (0=disable)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "minimum-duration": {
                        "blurb": "The minimum duration to store",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstgopbuffer",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-gopbuffer",
        "source": "gst-plugin-gopbuffer",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "gtk4": {
        "description": "GStreamer GTK 4 sink element",
        "elements": {
            "gtk4paintablesink": {
                "author": "Bilal Elmoussaoui <bil.elmoussaoui@gmail.com>, Jordan Petridis <jordan@centricular.com>, Sebastian Dröge <sebastian@centricular.com>",
                "description": "A GTK 4 Paintable sink",
                "hierarchy": [
                    "GstGtk4PaintableSink",
                    "GstVideoSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Sink/Video",
                "long-name": "GTK 4 Paintable Sink",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(memory:DMABuf, meta:GstVideoOverlayComposition):\n         format: DMA_DRM\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:DMABuf):\n         format: DMA_DRM\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:GLMemory, meta:GstVideoOverlayComposition):\n         format: { RGBA, RGB }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: { RGBA, RGB }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:SystemMemory, meta:GstVideoOverlayComposition):\n         format: { BGRx, xRGB, RGBx, xBGR, BGRA, ARGB, RGBA, ABGR, RGB, BGR }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(meta:GstVideoOverlayComposition):\n         format: { BGRx, xRGB, RGBx, xBGR, BGRA, ARGB, RGBA, ABGR, RGB, BGR }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: { BGRx, xRGB, RGBx, xBGR, BGRA, ARGB, RGBA, ABGR, RGB, BGR }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "paintable": {
                        "blurb": "The Paintable the sink renders to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGtk4Paintable",
                        "writable": false
                    },
                    "window-height": {
                        "blurb": "the height of the main widget rendering the paintable",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "window-width": {
                        "blurb": "the width of the main widget rendering the paintable",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstgtk4",
        "license": "MPL",
        "other-types": {
            "GstGtk4Paintable": {
                "hierarchy": [
                    "GstGtk4Paintable",
                    "GObject"
                ],
                "interfaces": [
                    "GdkPaintable"
                ],
                "kind": "object",
                "properties": {
                    "background-color": {
                        "blurb": "Background color to render behind the video frame and in the borders",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "255",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "force-aspect-ratio": {
                        "blurb": "When enabled, scaling will respect original aspect ratio",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "gl-context": {
                        "blurb": "GL context to use for rendering",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": true,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GdkGLContext",
                        "writable": true
                    },
                    "orientation": {
                        "blurb": "Orientation of the video frames",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "auto (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGtk4PaintableSinkOrientation",
                        "writable": true
                    },
                    "scaling-filter": {
                        "blurb": "Scaling filter to use for rendering",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "linear (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GskScalingFilter",
                        "writable": true
                    },
                    "use-scaling-filter": {
                        "blurb": "Use selected scaling filter or GTK default for rendering",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                }
            },
            "GstGtk4PaintableSinkOrientation": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Auto",
                        "name": "auto",
                        "value": "0"
                    },
                    {
                        "desc": "Rotate0",
                        "name": "rotate0",
                        "value": "1"
                    },
                    {
                        "desc": "Rotate90",
                        "name": "rotate90",
                        "value": "2"
                    },
                    {
                        "desc": "Rotate180",
                        "name": "rotate180",
                        "value": "3"
                    },
                    {
                        "desc": "Rotate270",
                        "name": "rotate270",
                        "value": "4"
                    },
                    {
                        "desc": "FlipRotate0",
                        "name": "flip-rotate0",
                        "value": "5"
                    },
                    {
                        "desc": "FlipRotate90",
                        "name": "flip-rotate90",
                        "value": "6"
                    },
                    {
                        "desc": "FlipRotate180",
                        "name": "flip-rotate180",
                        "value": "7"
                    },
                    {
                        "desc": "FlipRotate270",
                        "name": "flip-rotate270",
                        "value": "8"
                    }
                ]
            }
        },
        "package": "gst-plugin-gtk4",
        "source": "gst-plugin-gtk4",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "hlsmultivariantsink": {
        "description": "GStreamer HLS (HTTP Live Streaming) multi-variant sink Plugin",
        "elements": {
            "hlsmultivariantsink": {
                "author": "Sanchayan Maity <sanchayan@asymptotic.io>",
                "description": "HTTP Live Streaming sink",
                "hierarchy": [
                    "GstHlsMultivariantSink",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Sink/Muxer",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request",
                        "type": "HlsMultivariantSinkPad"
                    },
                    "video_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request",
                        "type": "HlsMultivariantSinkPad"
                    }
                },
                "properties": {
                    "max-files": {
                        "blurb": "Maximum number of files to keep on disk. Once the maximum is reached, old files start to be deleted to make room for new ones.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "multivariant-playlist-location": {
                        "blurb": "Location of the multivariant playlist file to write",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "multivariant.m3u8",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "muxer-type": {
                        "blurb": "The muxer to use, cmafmux or mpegtsmux, accordingly selects hlssink3 or hlscmafsink",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "cmaf (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstHlsMultivariantSinkMuxerType",
                        "writable": true
                    },
                    "playlist-length": {
                        "blurb": "Length of HLS playlist. To allow players to conform to section 6.3.3 of the HLS specification, this should be at least 3. If set to 0, the playlist will be infinite.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "playlist-type": {
                        "blurb": "The type of the playlist to use. When VOD type is set, the playlist will be live until the pipeline ends execution.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "unspecified (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstHlsMultivariantSinkPlaylistType",
                        "writable": true
                    },
                    "send-keyframe-requests": {
                        "blurb": "Send keyframe requests to ensure correct fragmentation. If this is disabled then the input must have keyframes in regular intervals.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "target-duration": {
                        "blurb": "The target duration in seconds of a segment/file. (0 - disabled, useful for management of segment duration by the streaming server)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "delete-fragment": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "get-fragment-stream": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "GOutputStream",
                        "when": "last"
                    },
                    "get-init-stream": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "GOutputStream",
                        "when": "last"
                    },
                    "get-multivariant-playlist-stream": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "GOutputStream",
                        "when": "last"
                    },
                    "get-playlist-stream": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "GOutputStream",
                        "when": "last"
                    }
                }
            }
        },
        "filename": "gsthlsmultivariantsink",
        "license": "MPL",
        "other-types": {
            "GstHlsMultivariantSinkMuxerType": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "cmaf",
                        "name": "cmaf",
                        "value": "0"
                    },
                    {
                        "desc": "mpegts",
                        "name": "mpegts",
                        "value": "1"
                    }
                ]
            },
            "GstHlsMultivariantSinkPlaylistType": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Unspecified: The tag `#EXT-X-PLAYLIST-TYPE` won't be present in the playlist during the pipeline processing.",
                        "name": "unspecified",
                        "value": "0"
                    },
                    {
                        "desc": "Event: No segments will be removed from the playlist. At the end of the processing, the tag `#EXT-X-ENDLIST` is added to the playlist. The tag `#EXT-X-PLAYLIST-TYPE:EVENT` will be present in the playlist.",
                        "name": "event",
                        "value": "1"
                    },
                    {
                        "desc": "Vod: The playlist behaves like the `event` option (a live event), but at the end of the processing, the playlist will be set to `#EXT-X-PLAYLIST-TYPE:VOD`.",
                        "name": "vod",
                        "value": "2"
                    }
                ]
            },
            "HlsMultivariantSinkPad": {
                "hierarchy": [
                    "HlsMultivariantSinkPad",
                    "GstGhostPad",
                    "GstProxyPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "alternate-rendition": {
                        "blurb": "Alternate Rendition",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "variant-stream, is-i-frame=(boolean)false, uri=(string)\"\", bandwidth=(guint64)0, codecs=(string)NULL, audio=(string)NULL, video=(string)NULL;",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "init-segment-location": {
                        "blurb": "Location of the init segment file to write for CMAF",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "playlist-location": {
                        "blurb": "Location of the media playlist to write",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "segment-location": {
                        "blurb": "Location of the media segment file to write",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "variant": {
                        "blurb": "Variant Stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "variant-stream, is-i-frame=(boolean)false, uri=(string)\"\", bandwidth=(guint64)0, codecs=(string)NULL, audio=(string)NULL, video=(string)NULL;",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    }
                }
            }
        },
        "package": "gst-plugin-hlsmultivariantsink",
        "source": "gst-plugin-hlsmultivariantsink",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "hlssink3": {
        "description": "GStreamer HLS (HTTP Live Streaming) Plugin",
        "elements": {
            "hlscmafsink": {
                "author": "Seungha Yang <seungha@centricular.com>",
                "description": "HTTP Live Streaming CMAF Sink",
                "hierarchy": [
                    "GstHlsCmafSink",
                    "GstHlsBaseSink",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Sink/Muxer",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-h264:\n  stream-format: { (string)avc, (string)avc3 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-h265:\n  stream-format: { (string)hvc1, (string)hev1 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n       channels: [ 1, 65535 ]\n           rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "iframe-playlist-location": {
                        "blurb": "Location of the I-frame playlist file to write",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "init-location": {
                        "blurb": "Location of the init fragment file to write",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "init%%05d.mp4",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Additional latency to allow upstream to take longer to produce buffers for the current position (in nanoseconds)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "7500000000",
                        "max": "9223372036854775807",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "location": {
                        "blurb": "Location of the fragment file to write",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "segment%%05d.m4s",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "playlist-root-init": {
                        "blurb": "Base path for the init fragment in the playlist file.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "playlist-type": {
                        "blurb": "The type of the playlist to use. When VOD type is set, the playlist will be live until the pipeline ends execution.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "unspecified (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstHlsSink3PlaylistType",
                        "writable": true
                    },
                    "sync": {
                        "blurb": "Sync on the clock",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "target-duration": {
                        "blurb": "The target duration in seconds of a segment/file. (0 - disabled, useful for management of segment duration by the streaming server)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "get-init-stream": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "GOutputStream",
                        "when": "last"
                    },
                    "new-playlist": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "hlssink3": {
                "author": "Alessandro Decina <alessandro.d@gmail.com>, Sebastian Dröge <sebastian@centricular.com>, Rafael Caricio <rafael@caricio.com>",
                "description": "HTTP Live Streaming sink",
                "hierarchy": [
                    "GstHlsSink3",
                    "GstHlsBaseSink",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Sink/Muxer",
                "pad-templates": {
                    "audio": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "video": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    }
                },
                "properties": {
                    "i-frames-only": {
                        "blurb": "Each video segments is single iframe, So put EXT-X-I-FRAMES-ONLY tag in the playlist",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "location": {
                        "blurb": "Location of the file to write",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "segment%%05d.ts",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "playlist-type": {
                        "blurb": "The type of the playlist to use. When VOD type is set, the playlist will be live until the pipeline ends execution.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "unspecified (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstHlsSink3PlaylistType",
                        "writable": true
                    },
                    "send-keyframe-requests": {
                        "blurb": "Send keyframe requests to ensure correct fragmentation. If this is disabled then the input must have keyframes in regular intervals.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "target-duration": {
                        "blurb": "The target duration in seconds of a segment/file. (0 - disabled, useful for management of segment duration by the streaming server)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gsthlssink3",
        "license": "MPL",
        "other-types": {
            "GstHlsBaseSink": {
                "hierarchy": [
                    "GstHlsBaseSink",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "kind": "object",
                "properties": {
                    "enable-endlist": {
                        "blurb": "Write \"EXT-X-ENDLIST\" tag to manifest at the end of stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "enable-program-date-time": {
                        "blurb": "put EXT-X-PROGRAM-DATE-TIME tag in the playlist",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "max-files": {
                        "blurb": "Maximum number of files to keep on disk. Once the maximum is reached, old files start to be deleted to make room for new ones.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "pdt-follows-pipeline-clock": {
                        "blurb": "As there might be drift between the wallclock and pipeline clock, this controls whether the Program-Date-Time markers should follow the pipeline clock rate (true), or be skewed to match the wallclock rate (false) (deprecated).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "playlist-length": {
                        "blurb": "Length of HLS playlist. To allow players to conform to section 6.3.3 of the HLS specification, this should be at least 3. If set to 0, the playlist will be infinite.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "playlist-location": {
                        "blurb": "Location of the playlist to write.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "playlist.m3u8",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "playlist-root": {
                        "blurb": "Base path for the segments in the playlist file.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "program-date-time-reference": {
                        "blurb": "Sets the reference for program date time. Pipeline: Use pipeline clock. System: Use system clock (As there might be drift between the wallclock and pipeline clock), BufferReferenceTimestamp: Use buffer time from reference timestamp meta.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "pipeline (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstHlsProgramDateTimeReference",
                        "writable": true
                    },
                    "single-media-file": {
                        "blurb": "Location of the single media file to write (media playlist will use byte-range addressing)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "signals": {
                    "delete-fragment": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "get-fragment-stream": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "GOutputStream",
                        "when": "last"
                    },
                    "get-playlist-stream": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "GOutputStream",
                        "when": "last"
                    }
                }
            },
            "GstHlsProgramDateTimeReference": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Pipeline: Use the pipeline clock",
                        "name": "pipeline",
                        "value": "0"
                    },
                    {
                        "desc": "System: Use the system clock",
                        "name": "system",
                        "value": "1"
                    },
                    {
                        "desc": "BufferReferenceTimestamp: Use the buffer reference timestamp",
                        "name": "buffer-reference-timestamp",
                        "value": "2"
                    }
                ]
            },
            "GstHlsSink3PlaylistType": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Unspecified: The tag `#EXT-X-PLAYLIST-TYPE` won't be present in the playlist during the pipeline processing.",
                        "name": "unspecified",
                        "value": "0"
                    },
                    {
                        "desc": "Event: No segments will be removed from the playlist. At the end of the processing, the tag `#EXT-X-ENDLIST` is added to the playlist. The tag `#EXT-X-PLAYLIST-TYPE:EVENT` will be present in the playlist.",
                        "name": "event",
                        "value": "1"
                    },
                    {
                        "desc": "Vod: The playlist behaves like the `event` option (a live event), but at the end of the processing, the playlist will be set to `#EXT-X-PLAYLIST-TYPE:VOD`.",
                        "name": "vod",
                        "value": "2"
                    }
                ]
            }
        },
        "package": "gst-plugin-hlssink3",
        "source": "gst-plugin-hlssink3",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "hsv": {
        "description": "GStreamer plugin with HSV manipulation elements",
        "elements": {
            "hsvdetector": {
                "author": "Julien Bardagi <julien.bardagi@gmail.com>",
                "description": "Works within the HSV colorspace to mark positive pixels",
                "hierarchy": [
                    "GstHsvDetector",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Converter/Video",
                "long-name": "HSV detector",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { RGBx, xRGB, BGRx, xBGR, RGB, BGR }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { RGBA, ARGB, BGRA, ABGR }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hue-ref": {
                        "blurb": "Hue reference in degrees",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "hue-var": {
                        "blurb": "Allowed hue variation from the reference hue angle, in degrees",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "180",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "saturation-ref": {
                        "blurb": "Reference saturation value",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "saturation-var": {
                        "blurb": "Allowed saturation variation from the reference value",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.15",
                        "max": "1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "value-ref": {
                        "blurb": "Reference value value",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "value-var": {
                        "blurb": "Allowed value variation from the reference value",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.3",
                        "max": "1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "hsvfilter": {
                "author": "Julien Bardagi <julien.bardagi@gmail.com>",
                "description": "Works within the HSV colorspace to apply transformations to incoming frames",
                "hierarchy": [
                    "GstHsvFilter",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Converter/Video",
                "long-name": "HSV filter",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { RGBx, xRGB, BGRx, xBGR, RGBA, ARGB, BGRA, ABGR, RGB, BGR }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { RGBx, xRGB, BGRx, xBGR, RGBA, ARGB, BGRA, ABGR, RGB, BGR }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hue-shift": {
                        "blurb": "Hue shifting in degrees",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "saturation-mul": {
                        "blurb": "Saturation multiplier to apply to the saturation value (before offset)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "saturation-off": {
                        "blurb": "Saturation offset to add to the saturation value (after multiplier)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "value-mul": {
                        "blurb": "Value multiplier to apply to the value (before offset)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "value-off": {
                        "blurb": "Value offset to add to the value (after multiplier)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gsthsv",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-hsv",
        "source": "gst-plugin-hsv",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "isobmff": {
        "description": "GStreamer ISO Base Media File Format (MP4) Plugin",
        "elements": {
            "cmafmux": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "CMAF fragmented MP4 muxer",
                "hierarchy": [
                    "GstCMAFMux",
                    "GstFMP4Mux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Muxer",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-h264:\n  stream-format: { (string)avc, (string)avc3 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-av1:\n  stream-format: obu-stream\n      alignment: tu\n        profile: { (string)main, (string)high, (string)professional }\n  chroma-format: { (string)4:0:0, (string)4:2:0, (string)4:2:2, (string)4:4:4 }\n bit-depth-luma: { (uint)8, (uint)10, (uint)12 }\nbit-depth-chroma: { (uint)8, (uint)10, (uint)12 }\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-h265:\n  stream-format: { (string)hvc1, (string)hev1 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n       channels: [ 1, 65535 ]\n           rate: [ 1, 2147483647 ]\naudio/x-opus:\nchannel-mapping-family: [ 0, 255 ]\n       channels: [ 1, 8 ]\n           rate: [ 1, 2147483647 ]\naudio/x-eac3:\n         framed: true\n      alignment: iec61937\n       channels: [ 1, 65535 ]\n           rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always",
                        "type": "GstFMP4MuxPad"
                    },
                    "src": {
                        "caps": "video/quicktime:\n        variant: cmaf\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            },
            "dashmp4mux": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "DASH fragmented MP4 muxer",
                "hierarchy": [
                    "GstDASHMP4Mux",
                    "GstFMP4Mux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Muxer",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-h264:\n  stream-format: { (string)avc, (string)avc3 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-h265:\n  stream-format: { (string)hvc1, (string)hev1 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-vp8:\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-vp9:\n        profile: { (string)0, (string)1, (string)2, (string)3 }\n  chroma-format: { (string)4:2:0, (string)4:2:2, (string)4:4:4 }\n bit-depth-luma: { (uint)8, (uint)10, (uint)12 }\nbit-depth-chroma: { (uint)8, (uint)10, (uint)12 }\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-av1:\n  stream-format: obu-stream\n      alignment: tu\n        profile: { (string)main, (string)high, (string)professional }\n  chroma-format: { (string)4:0:0, (string)4:2:0, (string)4:2:2, (string)4:4:4 }\n bit-depth-luma: { (uint)8, (uint)10, (uint)12 }\nbit-depth-chroma: { (uint)8, (uint)10, (uint)12 }\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n       channels: [ 1, 65535 ]\n           rate: [ 1, 2147483647 ]\naudio/x-opus:\nchannel-mapping-family: [ 0, 255 ]\n       channels: [ 1, 8 ]\n           rate: [ 1, 2147483647 ]\naudio/x-ac3:\n         framed: true\n      alignment: frame\n       channels: [ 1, 65535 ]\n           rate: [ 1, 2147483647 ]\naudio/x-eac3:\n         framed: true\n      alignment: iec61937\n       channels: [ 1, 65535 ]\n           rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always",
                        "type": "GstFMP4MuxPad"
                    },
                    "src": {
                        "caps": "video/quicktime:\n        variant: iso-fragmented\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            },
            "isofmp4mux": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "ISO fragmented MP4 muxer",
                "hierarchy": [
                    "GstISOFMP4Mux",
                    "GstFMP4Mux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Muxer",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "video/x-h264:\n  stream-format: { (string)avc, (string)avc3 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-h265:\n  stream-format: { (string)hvc1, (string)hev1 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-vp8:\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-vp9:\n        profile: { (string)0, (string)1, (string)2, (string)3 }\n  chroma-format: { (string)4:2:0, (string)4:2:2, (string)4:4:4 }\n bit-depth-luma: { (uint)8, (uint)10, (uint)12 }\nbit-depth-chroma: { (uint)8, (uint)10, (uint)12 }\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-av1:\n  stream-format: obu-stream\n      alignment: tu\n        profile: { (string)main, (string)high, (string)professional }\n  chroma-format: { (string)4:0:0, (string)4:2:0, (string)4:2:2, (string)4:4:4 }\n bit-depth-luma: { (uint)8, (uint)10, (uint)12 }\nbit-depth-chroma: { (uint)8, (uint)10, (uint)12 }\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n       channels: [ 1, 65535 ]\n           rate: [ 1, 2147483647 ]\naudio/x-opus:\nchannel-mapping-family: [ 0, 255 ]\n       channels: [ 1, 8 ]\n           rate: [ 1, 2147483647 ]\naudio/x-flac:\n         framed: true\n       channels: [ 1, 8 ]\n           rate: [ 1, 655350 ]\naudio/x-ac3:\n         framed: true\n      alignment: frame\n       channels: [ 1, 65535 ]\n           rate: [ 1, 2147483647 ]\naudio/x-eac3:\n         framed: true\n      alignment: iec61937\n       channels: [ 1, 65535 ]\n           rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstFMP4MuxPad"
                    },
                    "src": {
                        "caps": "video/quicktime:\n        variant: iso-fragmented\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "offset-to-zero": {
                        "blurb": "Offsets all streams so that the earliest stream starts at 0",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "isomp4mux": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "ISO MP4 muxer",
                "hierarchy": [
                    "GstISOMP4Mux",
                    "GstRsMP4Mux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Muxer",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "video/x-h264:\n  stream-format: { (string)avc, (string)avc3 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-h265:\n  stream-format: { (string)hvc1, (string)hev1 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-vp8:\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-vp9:\n        profile: { (string)0, (string)1, (string)2, (string)3 }\n  chroma-format: { (string)4:2:0, (string)4:2:2, (string)4:4:4 }\n bit-depth-luma: { (uint)8, (uint)10, (uint)12 }\nbit-depth-chroma: { (uint)8, (uint)10, (uint)12 }\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-av1:\n  stream-format: obu-stream\n      alignment: tu\n        profile: { (string)main, (string)high, (string)professional }\n  chroma-format: { (string)4:0:0, (string)4:2:0, (string)4:2:2, (string)4:4:4 }\n bit-depth-luma: { (uint)8, (uint)10, (uint)12 }\nbit-depth-chroma: { (uint)8, (uint)10, (uint)12 }\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-raw:\n         format: { IYU2, RGB, BGR, NV12, NV21, RGBA, ARGB, ABGR, BGRA, RGBx, BGRx, Y444, AYUV, GRAY8, GRAY16_BE, GBR, RGBP, BGRP, v308, r210 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-raw:\n         format: { Y41B, NV16, NV61, Y42B }\n          width: [ 4, 2147483644, 4 ]\n         height: [ 1, 2147483647 ]\nvideo/x-raw:\n         format: { I420, YV12, YUY2, YVYU, UYVY, VYUY }\n          width: [ 4, 2147483644, 4 ]\n         height: [ 2, 2147483646, 2 ]\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n       channels: [ 1, 65535 ]\n           rate: [ 1, 2147483647 ]\naudio/x-opus:\nchannel-mapping-family: [ 0, 255 ]\n       channels: [ 1, 8 ]\n           rate: [ 1, 2147483647 ]\naudio/x-flac:\n         framed: true\n       channels: [ 1, 8 ]\n           rate: [ 1, 655350 ]\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstRsMP4MuxPad"
                    },
                    "src": {
                        "caps": "video/quicktime:\n        variant: iso\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "onviffmp4mux": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "ONVIF fragmented MP4 muxer",
                "hierarchy": [
                    "GstONVIFFMP4Mux",
                    "GstFMP4Mux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Muxer",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "video/x-h264:\n  stream-format: { (string)avc, (string)avc3 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-h265:\n  stream-format: { (string)hvc1, (string)hev1 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nimage/jpeg:\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n       channels: [ 1, 65535 ]\n           rate: [ 1, 2147483647 ]\naudio/x-alaw:\n       channels: [ 1, 2 ]\n           rate: [ 1, 2147483647 ]\naudio/x-mulaw:\n       channels: [ 1, 2 ]\n           rate: [ 1, 2147483647 ]\naudio/x-adpcm:\n         layout: g726\n       channels: 1\n           rate: 8000\n        bitrate: { (int)16000, (int)24000, (int)32000, (int)40000 }\napplication/x-onvif-metadata:\n         parsed: true\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstFMP4MuxPad"
                    },
                    "src": {
                        "caps": "video/quicktime:\n        variant: iso-fragmented\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            },
            "onvifmp4mux": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "ONVIF MP4 muxer",
                "hierarchy": [
                    "GstONVIFMP4Mux",
                    "GstRsMP4Mux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Muxer",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "video/x-h264:\n  stream-format: { (string)avc, (string)avc3 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-h265:\n  stream-format: { (string)hvc1, (string)hev1 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nimage/jpeg:\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n       channels: [ 1, 65535 ]\n           rate: [ 1, 2147483647 ]\naudio/x-alaw:\n       channels: [ 1, 2 ]\n           rate: [ 1, 2147483647 ]\naudio/x-mulaw:\n       channels: [ 1, 2 ]\n           rate: [ 1, 2147483647 ]\naudio/x-adpcm:\n         layout: g726\n       channels: 1\n           rate: 8000\n        bitrate: { (int)16000, (int)24000, (int)32000, (int)40000 }\napplication/x-onvif-metadata:\n         parsed: true\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstRsMP4MuxPad"
                    },
                    "src": {
                        "caps": "video/quicktime:\n        variant: iso\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            }
        },
        "filename": "gstisobmff",
        "license": "MPL",
        "other-types": {
            "GstFMP4Mux": {
                "hierarchy": [
                    "GstFMP4Mux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "chunk-duration": {
                        "blurb": "Duration for each FMP4 chunk (default = no chunks)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "chunk-mode": {
                        "blurb": "Mode to control chunking on key frame or duration",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstFMP4MuxChunkMode",
                        "writable": true
                    },
                    "decode-time-offset": {
                        "blurb": "Offset to apply to the tfdt",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "-9223372036854775808",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "enable-keyframe-meta": {
                        "blurb": "Writes key frame meta for use by `hlscmafsink`",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "fragment-duration": {
                        "blurb": "Duration for each FMP4 fragment in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10000000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "header-update-mode": {
                        "blurb": "Mode for updating the header at the end of the stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstFMP4MuxHeaderUpdateMode",
                        "writable": true
                    },
                    "interleave-bytes": {
                        "blurb": "Interleave between streams in bytes",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "interleave-time": {
                        "blurb": "Interleave between streams in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "250000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "manual-split": {
                        "blurb": "Don't split automatically based on the fragment-duration and chunk-duration properties",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "movie-timescale": {
                        "blurb": "Timescale to use for the movie (units per second, 0 is automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "send-force-keyunit": {
                        "blurb": "Send force-keyunit events to request keyframes for the start of each fragment",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "start-fragment-sequence-number": {
                        "blurb": "Initial sequence number to use in the mfhd",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "write-edts-mode": {
                        "blurb": "Mode for writing EDTS, when in auto mode, edts written only for non-live streams.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "auto (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstFMP4MuxWriteEdtsMode",
                        "writable": true
                    },
                    "write-mehd": {
                        "blurb": "Write movie extends header box with the duration at the end of the stream (needs a header-update-mode enabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "write-mfra": {
                        "blurb": "Write fragment random access box at the end of the stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "signals": {
                    "send-headers": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "split-at-running-time": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint64"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "GstFMP4MuxChunkMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "None",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "Duration",
                        "name": "duration",
                        "value": "1"
                    },
                    {
                        "desc": "Keyframe",
                        "name": "keyframe",
                        "value": "2"
                    }
                ]
            },
            "GstFMP4MuxHeaderUpdateMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "None",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "Rewrite",
                        "name": "rewrite",
                        "value": "1"
                    },
                    {
                        "desc": "Update",
                        "name": "update",
                        "value": "2"
                    },
                    {
                        "desc": "Caps",
                        "name": "caps",
                        "value": "3"
                    }
                ]
            },
            "GstFMP4MuxPad": {
                "hierarchy": [
                    "GstFMP4MuxPad",
                    "GstAggregatorPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "trak-timescale": {
                        "blurb": "Timescale to use for the track (units per second, 0 is automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                }
            },
            "GstFMP4MuxWriteEdtsMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Auto",
                        "name": "auto",
                        "value": "0"
                    },
                    {
                        "desc": "Always",
                        "name": "always",
                        "value": "1"
                    },
                    {
                        "desc": "Never",
                        "name": "never",
                        "value": "2"
                    }
                ]
            },
            "GstRsMP4Mux": {
                "hierarchy": [
                    "GstRsMP4Mux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "extra-brands": {
                        "blurb": "Comma-separated list of 4-character brand codes (e.g. duke,sook)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "interleave-bytes": {
                        "blurb": "Interleave between streams in bytes",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "interleave-time": {
                        "blurb": "Interleave between streams in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "500000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "movie-timescale": {
                        "blurb": "Timescale to use for the movie (units per second, 0 is automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "tai-precision-timestamps": {
                        "blurb": "Whether to encode ISO/IEC 23001-17 TAI timestamps as auxiliary data",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                }
            },
            "GstRsMP4MuxPad": {
                "hierarchy": [
                    "GstRsMP4MuxPad",
                    "GstAggregatorPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "image-sequence": {
                        "blurb": "Generate ISO/IEC 23008-12 image sequence instead of video",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "trak-timescale": {
                        "blurb": "Timescale to use for the track (units per second, 0 is automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                }
            }
        },
        "package": "gst-plugin-isobmff",
        "source": "gst-plugin-isobmff",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "json": {
        "description": "GStreamer JSON Plugin",
        "elements": {
            "jsongstenc": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Wraps buffers containing any valid top-level JSON structures into higher level JSON objects, and outputs those as ndjson",
                "hierarchy": [
                    "GstJsonGstEnc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Encoder/JSON",
                "long-name": "GStreamer buffers to JSON",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-json:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-json:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            },
            "jsongstparse": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Parses ndjson as output by jsongstenc",
                "hierarchy": [
                    "GstJsonGstParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Parser/JSON",
                "long-name": "JSON GStreamer parser",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-json:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstjson",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-json",
        "source": "gst-plugin-json",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "lewton": {
        "description": "GStreamer lewton Vorbis Decoder Plugin",
        "elements": {
            "lewtondec": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "lewton Vorbis decoder",
                "hierarchy": [
                    "GstLewtonDec",
                    "GstAudioDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Decoder/Audio",
                "long-name": "lewton Vorbis decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-vorbis:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 255 ]\n         layout: interleaved\n         format: F32LE\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            }
        },
        "filename": "gstlewton",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-lewton",
        "source": "gst-plugin-lewton",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "livesync": {
        "description": "Livesync Plugin",
        "elements": {
            "livesync": {
                "author": "Jan Alexander Steffens (heftig) <jan.steffens@ltnglobal.com>",
                "description": "Outputs livestream, inserting gap frames when input lags",
                "hierarchy": [
                    "GstLiveSync",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter",
                "long-name": "Live Synchronizer",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "drop": {
                        "blurb": "Number of incoming frames dropped",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "duplicate": {
                        "blurb": "Number of outgoing frames duplicated",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "in": {
                        "blurb": "Number of incoming frames accepted",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "late-threshold": {
                        "blurb": "Maximum time spent (in nanoseconds) before accepting one late buffer; -1 = never",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2000000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Additional latency to allow upstream to take longer to produce buffers for the current position (in nanoseconds)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "out": {
                        "blurb": "Number of outgoing frames produced",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "silent": {
                        "blurb": "Don't emit notify for dropped and duplicated frames",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "single-segment": {
                        "blurb": "Timestamp buffers and eat segments so as to appear as one segment",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "sync": {
                        "blurb": "Synchronize buffers to the clock",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstlivesync",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-livesync",
        "source": "gst-plugin-livesync",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "mpegtslive": {
        "description": "GStreamer MPEG-TS Live sources",
        "elements": {
            "mpegtslivesrc": {
                "author": "Edward Hervey <edward@centricular.com>",
                "description": "Wrap MPEG-TS sources and provide a live clock",
                "hierarchy": [
                    "GstMpegTsLiveSource",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Network",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "source": {
                        "blurb": "Source element",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "window-size": {
                        "blurb": "The size of the window used to calculate rate and offset",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "32",
                        "max": "1024",
                        "min": "2",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstmpegtslive",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-mpegtslive",
        "source": "gst-plugin-mpegtslive",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "ndi": {
        "description": "GStreamer NewTek NDI Plugin",
        "elements": {
            "ndisink": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "NewTek NDI Sink",
                "hierarchy": [
                    "GstNdiSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Sink/Audio/Video",
                "long-name": "NewTek NDI Sink",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { UYVY, I420, NV12, NV21, YV12, BGRA, BGRx, RGBA, RGBx }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\naudio/x-raw:\n         format: F32LE\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "ndi-name": {
                        "blurb": "NDI Name to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "ndisinkcombiner": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "NewTek NDI sink audio/video combiner",
                "hierarchy": [
                    "GstNdiSinkCombiner",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Combiner/Audio/Video",
                "long-name": "NewTek NDI Sink Combiner",
                "pad-templates": {
                    "audio": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483646 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: F32LE\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstAggregatorPad"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { UYVY, I420, NV12, NV21, YV12, BGRA, BGRx, RGBA, RGBx }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 1/2147483647, 2147483646/1 ]\n",
                        "direction": "src",
                        "presence": "always",
                        "type": "GstAggregatorPad"
                    },
                    "video": {
                        "caps": "video/x-raw:\n         format: { UYVY, I420, NV12, NV21, YV12, BGRA, BGRx, RGBA, RGBx }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 1/2147483647, 2147483646/1 ]\n",
                        "direction": "sink",
                        "presence": "always",
                        "type": "GstAggregatorPad"
                    }
                },
                "rank": "none"
            },
            "ndisrc": {
                "author": "Ruben Gonzalez <rubenrua@teltek.es>, Daniel Vilar <daniel.peiteado@teltek.es>, Sebastian Dröge <sebastian@centricular.com>",
                "description": "NewTek NDI Source",
                "hierarchy": [
                    "GstNdiSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Audio/Video/Network",
                "long-name": "NewTek NDI Source",
                "pad-templates": {
                    "src": {
                        "caps": "application/x-ndi:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "bandwidth": {
                        "blurb": "Bandwidth, -10 metadata-only, 10 audio-only, 100 highest",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "100",
                        "max": "100",
                        "min": "-10",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "color-format": {
                        "blurb": "Receive color format",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "uyvy-bgra (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstNdiRecvColorFormat",
                        "writable": true
                    },
                    "connect-timeout": {
                        "blurb": "Connection timeout in ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-queue-length": {
                        "blurb": "Maximum receive queue length",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "ndi-name": {
                        "blurb": "NDI stream name of the sender",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "receiver-ndi-name": {
                        "blurb": "NDI stream name of this receiver",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "timeout": {
                        "blurb": "Receive timeout in ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "timestamp-mode": {
                        "blurb": "Timestamp information to use for outgoing PTS",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "auto (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstNdiTimestampMode",
                        "writable": true
                    },
                    "url-address": {
                        "blurb": "URL/address and port of the sender, e.g. 127.0.0.1:5961",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "ndisrcdemux": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "NewTek NDI source demuxer",
                "hierarchy": [
                    "GstNdiSrcDemux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Demuxer/Audio/Video",
                "long-name": "NewTek NDI Source Demuxer",
                "pad-templates": {
                    "audio": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "sink": {
                        "caps": "application/x-ndi:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "video": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstndi",
        "license": "MPL",
        "other-types": {
            "GstNdiRecvColorFormat": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "BGRX or BGRA",
                        "name": "bgrx-bgra",
                        "value": "0"
                    },
                    {
                        "desc": "UYVY or BGRA",
                        "name": "uyvy-bgra",
                        "value": "1"
                    },
                    {
                        "desc": "RGBX or RGBA",
                        "name": "rgbx-rgba",
                        "value": "2"
                    },
                    {
                        "desc": "UYVY or RGBA",
                        "name": "uyvy-rgba",
                        "value": "3"
                    },
                    {
                        "desc": "Fastest",
                        "name": "fastest",
                        "value": "4"
                    },
                    {
                        "desc": "Best",
                        "name": "best",
                        "value": "5"
                    }
                ]
            },
            "GstNdiTimestampMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Auto",
                        "name": "auto",
                        "value": "0"
                    },
                    {
                        "desc": "Receive Time / Timecode",
                        "name": "receive-time-vs-timecode",
                        "value": "1"
                    },
                    {
                        "desc": "Receive Time / Timestamp",
                        "name": "receive-time-vs-timestamp",
                        "value": "2"
                    },
                    {
                        "desc": "NDI Timecode",
                        "name": "timecode",
                        "value": "3"
                    },
                    {
                        "desc": "NDI Timestamp",
                        "name": "timestamp",
                        "value": "4"
                    },
                    {
                        "desc": "Receive Time",
                        "name": "receive-time",
                        "value": "5"
                    },
                    {
                        "desc": "Clocked",
                        "name": "clocked",
                        "value": "6"
                    }
                ]
            }
        },
        "package": "gst-plugin-ndi",
        "source": "gst-plugin-ndi",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "originalbuffer": {
        "description": "GStreamer Origin buffer meta Plugin",
        "elements": {
            "originalbufferrestore": {
                "author": "Olivier Crête <olivier.crete@collabora.com>",
                "description": "Restores a reference to the buffer in a meta",
                "hierarchy": [
                    "GstOriginalBufferRestore",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            },
            "originalbuffersave": {
                "author": "Olivier Crête <olivier.crete@collabora.com>",
                "description": "Saves a reference to the buffer in a meta",
                "hierarchy": [
                    "GstOriginalBufferSave",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstoriginalbuffer",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-originalbuffer",
        "source": "gst-plugin-originalbuffer",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "quinn": {
        "description": "GStreamer Plugin for QUIC",
        "elements": {
            "quinnquicdemux": {
                "author": "Sanchayan Maity <sanchayan@asymptotic.io>",
                "description": "Demultiplexes multiple streams and datagram for QUIC",
                "hierarchy": [
                    "GstQuinnQuicDemux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Network/QUIC",
                "pad-templates": {
                    "datagram": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "stream_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "rank": "none"
            },
            "quinnquicmux": {
                "author": "Sanchayan Maity <sanchayan@asymptotic.io>",
                "description": "Multiplexes multiple streams and datagram for QUIC",
                "hierarchy": [
                    "GstQuinnQuicMux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Source/Network/QUIC",
                "pad-templates": {
                    "datagram": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstAggregatorPad"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    },
                    "stream_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request",
                        "type": "QuinnQuicMuxPad"
                    }
                },
                "rank": "none"
            },
            "quinnquicsink": {
                "author": "Sanchayan Maity <sanchayan@asymptotic.io>",
                "description": "Send data over the network via QUIC",
                "hierarchy": [
                    "GstQuinnQuicSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Network/QUIC",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "address": {
                        "blurb": "Address of the QUIC server e.g. 127.0.0.1",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "127.0.0.1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "alpn-protocols": {
                        "blurb": "QUIC connection Application-Layer Protocol Negotiation (ALPN) values",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    },
                    "bind-address": {
                        "blurb": "Address to bind QUIC client e.g. 0.0.0.0",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.0.0.0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "bind-port": {
                        "blurb": "Port to bind QUIC client e.g. 5001",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "certificate-file": {
                        "blurb": "Path to certificate chain in single file",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "client-address": {
                        "blurb": "Address to be used by this QUIC client e.g. 127.0.0.1",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "127.0.0.1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "client-port": {
                        "blurb": "Port to be used by this QUIC client e.g. 5001",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5001",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "datagram-receive-buffer-size": {
                        "blurb": "Maximum number of incoming application datagram bytes to buffer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1250000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "datagram-send-buffer-size": {
                        "blurb": "Maximum number of outgoing application datagram bytes to buffer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1048576",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "drop-buffer-for-datagram": {
                        "blurb": "Drop buffers when using datagram if buffer size > max datagram size",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "initial-mtu": {
                        "blurb": "Initial value to be used as the maximum UDP payload size",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1200",
                        "max": "-1",
                        "min": "1200",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "keep-alive-interval": {
                        "blurb": "Keeps QUIC connection alive by periodically pinging the server. Value set in ms, 0 disables this feature",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-concurrent-uni-streams": {
                        "blurb": "Maximum number of incoming unidirectional streams that may be open concurrently",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "32",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-udp-payload-size": {
                        "blurb": "Maximum UDP payload size accepted from peers (excluding UDP and IP overhead)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "65527",
                        "max": "65527",
                        "min": "1200",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "min-mtu": {
                        "blurb": "Maximum UDP payload size guaranteed to be supported by the network, must be <= initial-mtu",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1200",
                        "max": "-1",
                        "min": "1200",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "port": {
                        "blurb": "Port of the QUIC server e.g. 5000",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5000",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "private-key-file": {
                        "blurb": "Path to a PKCS8 or RSA private key file",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "role": {
                        "blurb": "QUIC connection role to use.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "client (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstQuinnQuicRole",
                        "writable": true
                    },
                    "secure-connection": {
                        "blurb": "Use certificates for QUIC connection. False: Insecure connection, True: Secure connection.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "send-window": {
                        "blurb": "Maximum number of bytes to transmit to a peer without acknowledgment",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "server-address": {
                        "blurb": "Address of the QUIC server to connect to e.g. 127.0.0.1",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "127.0.0.1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "server-name": {
                        "blurb": "Name of the QUIC server which is in server certificate in case of server role",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "localhost",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "server-port": {
                        "blurb": "Port of the QUIC server to connect to e.g. 5000",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5000",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Connection statistics",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "stats;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    },
                    "timeout": {
                        "blurb": "Value in seconds to timeout QUIC endpoint requests (0 = No timeout).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15",
                        "max": "3600",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "upper-bound-mtu": {
                        "blurb": "Upper bound to the max UDP payload size that MTU discovery will search for",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1452",
                        "max": "65527",
                        "min": "1452",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "use-datagram": {
                        "blurb": "Use datagram for lower latency, unreliable messaging",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "quinnquicsrc": {
                "author": "Sanchayan Maity <sanchayan@asymptotic.io>",
                "description": "Receive data over the network via QUIC",
                "hierarchy": [
                    "GstQuinnQuicSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Network/QUIC",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "address": {
                        "blurb": "Address of the QUIC server e.g. 127.0.0.1",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "127.0.0.1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "alpn-protocols": {
                        "blurb": "QUIC connection Application-Layer Protocol Negotiation (ALPN) values",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    },
                    "bind-address": {
                        "blurb": "Address to bind QUIC client e.g. 0.0.0.0",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.0.0.0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "bind-port": {
                        "blurb": "Port to bind QUIC client e.g. 5001",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "caps": {
                        "blurb": "The caps of the source pad",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "ANY",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "certificate-file": {
                        "blurb": "Path to certificate chain in single file",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "datagram-receive-buffer-size": {
                        "blurb": "Maximum number of incoming application datagram bytes to buffer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1250000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "datagram-send-buffer-size": {
                        "blurb": "Maximum number of outgoing application datagram bytes to buffer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1048576",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "initial-mtu": {
                        "blurb": "Initial value to be used as the maximum UDP payload size",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1200",
                        "max": "-1",
                        "min": "1200",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "keep-alive-interval": {
                        "blurb": "Keeps QUIC connection alive by periodically pinging the server. Value set in ms, 0 disables this feature",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-concurrent-uni-streams": {
                        "blurb": "Maximum number of incoming unidirectional streams that may be open concurrently",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "32",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-udp-payload-size": {
                        "blurb": "Maximum UDP payload size accepted from peers (excluding UDP and IP overhead)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "65527",
                        "max": "65527",
                        "min": "1200",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "min-mtu": {
                        "blurb": "Maximum UDP payload size guaranteed to be supported by the network, must be <= initial-mtu",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1200",
                        "max": "-1",
                        "min": "1200",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "port": {
                        "blurb": "Port of the QUIC server e.g. 5000",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5000",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "private-key-file": {
                        "blurb": "Path to a PKCS8 or RSA private key file",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "receive-window": {
                        "blurb": "Maximum number of bytes the peer may transmit across all streams of a connection before becoming blocked",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4611686018427387903",
                        "max": "4611686018427387903",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "role": {
                        "blurb": "QUIC connection role to use.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "server (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstQuinnQuicRole",
                        "writable": true
                    },
                    "secure-connection": {
                        "blurb": "Use certificates for QUIC connection. False: Insecure connection, True: Secure connection.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "server-address": {
                        "blurb": "Address of the QUIC server e.g. 127.0.0.1",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "127.0.0.1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "server-name": {
                        "blurb": "Name of the QUIC server which is in server certificate in case of server role",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "localhost",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "server-port": {
                        "blurb": "Port of the QUIC server e.g. 5000",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5000",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Connection statistics",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "stats;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    },
                    "stream-receive-window": {
                        "blurb": "Maximum number of bytes the peer may transmit without ACK on any one stream before becoming blocked",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1250000",
                        "max": "4611686018427387903",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "timeout": {
                        "blurb": "Value in seconds to timeout QUIC endpoint requests (0 = No timeout).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15",
                        "max": "3600",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "upper-bound-mtu": {
                        "blurb": "Upper bound to the max UDP payload size that MTU discovery will search for",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1452",
                        "max": "65527",
                        "min": "1452",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "use-datagram": {
                        "blurb": "Use datagram for lower latency, unreliable messaging",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "quinnroqdemux": {
                "author": "Sanchayan Maity <sanchayan@asymptotic.io>",
                "description": "Demultiplexes multiple RTP streams over QUIC",
                "hierarchy": [
                    "GstQuinnQuicRtpDemux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Network/QUIC",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "rank": "none",
                "signals": {
                    "request-flow-id-map": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint64"
                            }
                        ],
                        "return-type": "GstCaps",
                        "when": "last"
                    }
                }
            },
            "quinnroqmux": {
                "author": "Sanchayan Maity <sanchayan@asymptotic.io>",
                "description": "Multiplexes multiple RTP streams over QUIC",
                "hierarchy": [
                    "GstQuinnRoqMux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Source/Network/QUIC",
                "pad-templates": {
                    "datagram_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "QuinnRoqMuxPad"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    },
                    "stream_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "QuinnRoqMuxPad"
                    }
                },
                "rank": "none"
            },
            "quinnwtclientsrc": {
                "author": "Andoni Morales Alastruey <amorales@fluendo.com>",
                "description": "Receive data over the network via WebTransport",
                "hierarchy": [
                    "GstQuinnWebTransportClientSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Network/QUIC",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "certificate-file": {
                        "blurb": "Path to certificate chain in single file",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "keep-alive-interval": {
                        "blurb": "Keeps QUIC connection alive by periodically pinging the server. Value set in ms, 0 disables this feature",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "secure-connection": {
                        "blurb": "Use certificates for QUIC connection. False: Insecure connection, True: Secure connection.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Connection statistics",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "stats;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    },
                    "timeout": {
                        "blurb": "Value in seconds to timeout WebTransport endpoint requests (0 = No timeout).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15",
                        "max": "3600",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "url": {
                        "blurb": "URL of the HTTP/3 server to connect to.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "127.0.0.1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "quinnwtsink": {
                "author": "Ruben Gonzalez <rgonzalez@fluendo.com>",
                "description": "Send data over the network via WebTransport",
                "hierarchy": [
                    "GstQuinnWebTransportSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Network/WebTransport",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "address": {
                        "blurb": "Address of the QUIC server e.g. 127.0.0.1",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "127.0.0.1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "certificate-file": {
                        "blurb": "Path to certificate chain in single file",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "datagram-receive-buffer-size": {
                        "blurb": "Maximum number of incoming application datagram bytes to buffer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1250000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "datagram-send-buffer-size": {
                        "blurb": "Maximum number of outgoing application datagram bytes to buffer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1048576",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "drop-buffer-for-datagram": {
                        "blurb": "Drop buffers when using datagram if buffer size > max datagram size",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "initial-mtu": {
                        "blurb": "Initial value to be used as the maximum UDP payload size",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1200",
                        "max": "-1",
                        "min": "1200",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-udp-payload-size": {
                        "blurb": "Maximum UDP payload size accepted from peers (excluding UDP and IP overhead)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "65527",
                        "max": "65527",
                        "min": "1200",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "min-mtu": {
                        "blurb": "Maximum UDP payload size guaranteed to be supported by the network, must be <= initial-mtu",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1200",
                        "max": "-1",
                        "min": "1200",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "port": {
                        "blurb": "Port of the QUIC server e.g. 5000",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5000",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "private-key-file": {
                        "blurb": "Path to a PKCS8 or RSA private key file",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "role": {
                        "blurb": "WebTransport session role to use.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "server (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstQuinnQuicRole",
                        "writable": true
                    },
                    "secure-connection": {
                        "blurb": "Use certificates for QUIC connection. False: Insecure connection, True: Secure connection.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "server-name": {
                        "blurb": "Name of the QUIC server which is in server certificate in case of server role",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "localhost",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Connection statistics",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "stats;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    },
                    "timeout": {
                        "blurb": "Value in seconds to timeout QUIC endpoint requests (0 = No timeout).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3600",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "upper-bound-mtu": {
                        "blurb": "Upper bound to the max UDP payload size that MTU discovery will search for",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1452",
                        "max": "65527",
                        "min": "1452",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "url": {
                        "blurb": "URL of the HTTP/3 server to connect to.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "127.0.0.1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "use-datagram": {
                        "blurb": "Use datagram for lower latency, unreliable messaging",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "marginal"
            }
        },
        "filename": "gstquinn",
        "license": "MPL",
        "other-types": {
            "GstQuinnQuicRole": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Server: Act as QUIC server.",
                        "name": "server",
                        "value": "0"
                    },
                    {
                        "desc": "Client: Act as QUIC client.",
                        "name": "client",
                        "value": "1"
                    }
                ]
            },
            "QuinnQuicMuxPad": {
                "hierarchy": [
                    "QuinnQuicMuxPad",
                    "GstAggregatorPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "priority": {
                        "blurb": "Priority of the stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                }
            },
            "QuinnRoqMuxPad": {
                "hierarchy": [
                    "QuinnRoqMuxPad",
                    "GstAggregatorPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "flow-id": {
                        "blurb": "Flow identifier",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "4611686018427387903",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "priority": {
                        "blurb": "Priority of the stream, ignored by datagrams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                }
            }
        },
        "package": "gst-plugin-quinn",
        "source": "gst-plugin-quinn",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "raptorq": {
        "description": "GStreamer RaptorQ FEC Plugin",
        "elements": {
            "raptorqdec": {
                "author": "Tomasz Andrzejak <andreiltd@gmail.com>",
                "description": "Performs FEC using RaptorQ (RFC6681, RFC6682)",
                "hierarchy": [
                    "GstRaptorqDec",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "RTP RaptorQ FEC Decoding",
                "long-name": "RTP RaptorQ FEC Decoder",
                "pad-templates": {
                    "fec_%%u": {
                        "caps": "application/x-rtp:\nraptor-scheme-id: 6\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "sink": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "media-packets-reset-threshold": {
                        "blurb": "This is the maximum allowed number of buffered packets, before we reset the decoder. It can only be triggered if we don't receive repair packets for too long, or packets have no valid timestamps, (0 - disable)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5000",
                        "max": "-2",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "repair-window-tolerance": {
                        "blurb": "The amount of time to add to repair-window reported by RaptorQ encoder (in ms)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "500",
                        "max": "-2",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Various statistics",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-rtp-raptorqdec-stats, received-packets=(guint64)0, lost-packets=(guint64)0, recovered-packets=(guint64)0, buffered-media-packets=(guint64)0, buffered-repair-packets=(guint64)0;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    }
                },
                "rank": "marginal"
            },
            "raptorqenc": {
                "author": "Tomasz Andrzejak <andreiltd@gmail.com>",
                "description": "Performs FEC using RaptorQ (RFC6681, RFC6682)",
                "hierarchy": [
                    "GstRaptorqEnc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "RTP RaptorQ FEC Encoding",
                "long-name": "RTP RaptorQ FEC Encoder",
                "pad-templates": {
                    "fec_0": {
                        "caps": "application/x-rtp:\n     clock-rate: [ 0, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    },
                    "sink": {
                        "caps": "application/x-rtp:\n     clock-rate: [ 0, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n     clock-rate: [ 0, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "mtu": {
                        "blurb": "Maximum expected packet size",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1400",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "protected-packets": {
                        "blurb": "Number of packets to protect together",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "25",
                        "max": "-2",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "pt": {
                        "blurb": "The payload type of FEC packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "97",
                        "max": "255",
                        "min": "96",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "repair-packets": {
                        "blurb": "Number of repair packets per block to send",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5",
                        "max": "-2",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "repair-window": {
                        "blurb": "A time span in milliseconds in which repair packets are send",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "50",
                        "max": "-2",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "symbol-size": {
                        "blurb": "Size of RaptorQ data unit",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1408",
                        "max": "-2",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "marginal"
            }
        },
        "filename": "gstraptorq",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-raptorq",
        "source": "gst-plugin-raptorq",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rav1e": {
        "description": "GStreamer rav1e AV1 Encoder Plugin",
        "elements": {
            "rav1enc": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "rav1e AV1 encoder",
                "hierarchy": [
                    "GstRav1Enc",
                    "GstVideoEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset"
                ],
                "klass": "Encoder/Video",
                "long-name": "rav1e AV1 encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { I420, Y42B, Y444, I420_10LE, I422_10LE, Y444_10LE, I420_12LE, I422_12LE, Y444_12LE, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-av1:\n  stream-format: obu-stream\n      alignment: tu\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "bitrate": {
                        "blurb": "Bitrate in bits per second",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "error-resilient": {
                        "blurb": "Error Resilient",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "low-latency": {
                        "blurb": "Low Latency",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "max-key-frame-interval": {
                        "blurb": "Max Key Frame Interval",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "240",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "min-key-frame-interval": {
                        "blurb": "Min Key Frame Interval",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "12",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "min-quantizer": {
                        "blurb": "Min Quantizer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "255",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "quantizer": {
                        "blurb": "Quantizer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "100",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "rdo-lookahead-frames": {
                        "blurb": "RDO Lookahead Frames",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "reservoir-frame-delay": {
                        "blurb": "Reservoir Frame Delay",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-2147483648",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "speed-preset": {
                        "blurb": "Speed preset (10 fastest, 0 slowest)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "6",
                        "max": "10",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "switch-frame-interval": {
                        "blurb": "Switch Frame Interval",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "threads": {
                        "blurb": "Threads",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "tile-cols": {
                        "blurb": "Tile Cols",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "tile-rows": {
                        "blurb": "Tile Rows",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "tiles": {
                        "blurb": "Tiles",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "tune": {
                        "blurb": "Tune",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "psychovisual (1)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstRav1eEncTune",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstrav1e",
        "license": "MIT/X11",
        "other-types": {
            "GstRav1eEncTune": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Psnr",
                        "name": "psnr",
                        "value": "0"
                    },
                    {
                        "desc": "Psychovisual",
                        "name": "psychovisual",
                        "value": "1"
                    }
                ]
            }
        },
        "package": "gst-plugin-rav1e",
        "source": "gst-plugin-rav1e",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "regex": {
        "description": "GStreamer Regular Expression Plugin",
        "elements": {
            "regex": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Applies operations according to regular expressions",
                "hierarchy": [
                    "GstRegEx",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Text/Filter",
                "long-name": "Regular Expression processor",
                "pad-templates": {
                    "sink": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "commands": {
                        "blurb": "A set of commands to apply on input text",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstregex",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-regex",
        "source": "gst-plugin-regex",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "reqwest": {
        "description": "GStreamer reqwest HTTP Source Plugin",
        "elements": {
            "reqwesthttpsrc": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Read stream from an HTTP/HTTPS location",
                "hierarchy": [
                    "GstReqwestHttpSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Source/Network/HTTP",
                "long-name": "HTTP Source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "compress": {
                        "blurb": "Allow compressed content encodings",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "cookies": {
                        "blurb": "NULL",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GStrv",
                        "writable": true
                    },
                    "extra-headers": {
                        "blurb": "Extra headers to append to the HTTP request",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "iradio-mode": {
                        "blurb": "Enable internet radio mode (ask server to send shoutcast/icecast metadata interleaved with the actual stream data",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "is-live": {
                        "blurb": "Act like a live source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "keep-alive": {
                        "blurb": "Use HTTP persistent connections",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "location": {
                        "blurb": "URL to read from",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "proxy": {
                        "blurb": "HTTP proxy server URI",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "proxy-id": {
                        "blurb": "HTTP proxy URI user id for authentication",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "proxy-pw": {
                        "blurb": "HTTP proxy URI user password for authentication",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "timeout": {
                        "blurb": "Value in seconds to timeout a blocking I/O (0 = No timeout).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15",
                        "max": "3600",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "user-agent": {
                        "blurb": "Value of the User-Agent HTTP request header field",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "GStreamer reqwesthttpsrc",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "user-id": {
                        "blurb": "HTTP location URI user id for authentication",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "user-pw": {
                        "blurb": "HTTP location URI user password for authentication",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "marginal"
            }
        },
        "filename": "gstreqwest",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-reqwest",
        "source": "gst-plugin-reqwest",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rsanalytics": {
        "description": "GStreamer Rust Analytics Plugin",
        "elements": {
            "analyticscombiner": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Analytics combiner / batcher element",
                "hierarchy": [
                    "GstAnalyticsCombiner",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Combiner/Analytics",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstAnalyticsCombinerSinkPad"
                    },
                    "src": {
                        "caps": "multistream/x-analytics-batch(meta:GstAnalyticsBatchMeta):\n",
                        "direction": "src",
                        "presence": "always",
                        "type": "GstAggregatorPad"
                    }
                },
                "properties": {
                    "batch-duration": {
                        "blurb": "Batch Duration",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "100000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "force-live": {
                        "blurb": "Always operate in live mode and aggregate on timeout regardless of whether any live sources are linked upstream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": true,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "analyticssplitter": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Analytics batch splitter element",
                "hierarchy": [
                    "GstAnalyticsSplitter",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Demuxer/Analytics",
                "pad-templates": {
                    "sink": {
                        "caps": "multistream/x-analytics-batch(meta:GstAnalyticsBatchMeta):\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src_%%u_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "rank": "primary"
            },
            "onvifmeta2relationmeta": {
                "author": "Benjamin Gaignard <benjamin.gaignard@collabora.com>",
                "description": "Convert ONVIF metadata to relation metadata",
                "hierarchy": [
                    "GstOnvifMeta2RelationMeta",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Metadata",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            },
            "relationmeta2onvifmeta": {
                "author": "Benjamin Gaignard <benjamin.gaignard@collabora.com>",
                "description": "Convert relation metadata to ONVIF metadata",
                "hierarchy": [
                    "GstRelationMeta2OnvifMeta",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Metadata",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "time-source": {
                        "blurb": "Time source for UTC timestamps",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "clock (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstRsOnvifNtpTimeSource",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstrsanalytics",
        "license": "MPL-2.0",
        "other-types": {
            "GstAnalyticsCombinerBatchStrategy": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "All: Include all buffers that start inside the batch.",
                        "name": "all",
                        "value": "0"
                    },
                    {
                        "desc": "FirstInBatch: Include only the first buffer that starts inside the batch.",
                        "name": "first-in-batch",
                        "value": "1"
                    },
                    {
                        "desc": "FirstInBatchWithOverlap: Include only the first buffer that starts inside the batch unless there was a previously unused buffer at most half a batch duration earlier. If no buffer is available, allow taking a buffer up to half a batch duration later. The buffer closest to the batch start is included.",
                        "name": "first-in-batch-with-overlap",
                        "value": "2"
                    },
                    {
                        "desc": "LastInBatch: Include only the last buffer that starts inside the batch.",
                        "name": "last-in-batch",
                        "value": "3"
                    }
                ]
            },
            "GstAnalyticsCombinerSinkPad": {
                "hierarchy": [
                    "GstAnalyticsCombinerSinkPad",
                    "GstAggregatorPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "batch-strategy": {
                        "blurb": "Batching strategy to use for this stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "all (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstAnalyticsCombinerBatchStrategy",
                        "writable": true
                    },
                    "index": {
                        "blurb": "Index, must be consecutive and starting at 0 and is fixed up otherwise",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                }
            },
            "GstRsOnvifNtpTimeSource": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "UNIX time based on realtime clock.",
                        "name": "clock",
                        "value": "0"
                    },
                    {
                        "desc": "Running time is in UTC",
                        "name": "running-time",
                        "value": "1"
                    },
                    {
                        "desc": "Pipeline clock is UTC",
                        "name": "clock-time",
                        "value": "2"
                    }
                ]
            }
        },
        "package": "gst-plugin-analytics",
        "source": "gst-plugin-analytics",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rsaudiofx": {
        "description": "GStreamer Rust Audio Effects Plugin",
        "elements": {
            "audioloudnorm": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Normalizes perceived loudness of an audio stream",
                "hierarchy": [
                    "GstAudioLoudNorm",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Audio loudness normalizer",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: 192000\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: F64LE\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: 192000\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: F64LE\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "loudness-range-target": {
                        "blurb": "Loudness range target in LU",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "7",
                        "max": "20",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "loudness-target": {
                        "blurb": "Loudness target in LUFS",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-24",
                        "max": "-5",
                        "min": "-70",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "max-true-peak": {
                        "blurb": "Maximum True Peak in dbTP",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-2",
                        "max": "0",
                        "min": "-9",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "offset": {
                        "blurb": "Offset Gain in LU",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "99",
                        "min": "-99",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "audiornnoise": {
                "author": "Philippe Normand <philn@igalia.com>",
                "description": "Removes noise from an audio stream",
                "hierarchy": [
                    "GstAudioRNNoise",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Audio denoise",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: 48000\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: F32LE\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: 48000\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: F32LE\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "voice-activity-threshold": {
                        "blurb": "Threshold of the voice activity detector below which to mute the output",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "ebur128level": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Measures different loudness metrics according to EBU R128",
                "hierarchy": [
                    "GstEbuR128Level",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Analyzer/Audio",
                "long-name": "EBU R128 Loudness Level Measurement",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2822399 ]\n       channels: [ 1, 63 ]\n         layout: { (string)interleaved, (string)non-interleaved }\n         format: { S16LE, S32LE, F32LE, F64LE }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2822399 ]\n       channels: [ 1, 63 ]\n         layout: { (string)interleaved, (string)non-interleaved }\n         format: { S16LE, S32LE, F32LE, F64LE }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "interval": {
                        "blurb": "Interval in nanoseconds for posting messages",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000000000",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "mode": {
                        "blurb": "Selection of metrics to calculate",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true-peak+sample-peak+loudness-range+global+short-term+momentary",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstEbuR128LevelMode",
                        "writable": true
                    },
                    "post-messages": {
                        "blurb": "Whether to post messages on the bus for each interval",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "reset": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "hrtfrender": {
                "author": "Tomasz Andrzejak <andreiltd@gmail.com>",
                "description": "Renders spatial sounds to a given position",
                "hierarchy": [
                    "GstHrtfRender",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Head-Related Transfer Function (HRTF) renderer",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 64 ]\n         layout: interleaved\n         format: F32LE\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: 2\n         layout: interleaved\n         format: F32LE\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "block-length": {
                        "blurb": "Block Length is the length of each slice",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "512",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "hrir-file": {
                        "blurb": "Head Transform Impulse Response file location to read from",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "hrir-raw": {
                        "blurb": "Head Transform Impulse Response raw bytes",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GBytes",
                        "writable": true
                    },
                    "interpolation-steps": {
                        "blurb": "Interpolation Steps is the amount of slices to cut source to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "8",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "spatial-objects": {
                        "blurb": "Spatial object Metadata to apply on input channels",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "rsaudioecho": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Adds an echo or reverb effect to an audio stream",
                "hierarchy": [
                    "GstRsAudioEcho",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Audio echo",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: { F32LE, F64LE }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: { F32LE, F64LE }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "delay": {
                        "blurb": "Delay of the echo in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "500000000000",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "feedback": {
                        "blurb": "Amount of feedback",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "intensity": {
                        "blurb": "Intensity of the echo",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.5",
                        "max": "1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "max-delay": {
                        "blurb": "Maximum delay of the echo in nanoseconds (can't be changed in PLAYING or PAUSED state)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000000000",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstrsaudiofx",
        "license": "MPL",
        "other-types": {
            "GstEbuR128LevelMode": {
                "kind": "flags",
                "values": [
                    {
                        "desc": "Calculate momentary loudness (400ms)",
                        "name": "momentary",
                        "value": "0x00000001"
                    },
                    {
                        "desc": "Calculate short-term loudness (3s)",
                        "name": "short-term",
                        "value": "0x00000002"
                    },
                    {
                        "desc": "Calculate relative threshold and global loudness",
                        "name": "global",
                        "value": "0x00000004"
                    },
                    {
                        "desc": "Calculate loudness range",
                        "name": "loudness-range",
                        "value": "0x00000008"
                    },
                    {
                        "desc": "Calculate sample peak",
                        "name": "sample-peak",
                        "value": "0x00000010"
                    },
                    {
                        "desc": "Calculate true peak",
                        "name": "true-peak",
                        "value": "0x00000020"
                    }
                ]
            }
        },
        "package": "gst-plugin-audiofx",
        "source": "gst-plugin-audiofx",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rsaudioparsers": {
        "description": "GStreamer Rust Audio Parsers Plugin",
        "elements": {
            "s302mparse": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Extracts metadata from an S302M audio stream",
                "hierarchy": [
                    "GstS302MParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Parser/Audio",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-smpte-302m:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-smpte-302m:\n         parsed: true\n       channels: { (int)2, (int)4, (int)6, (int)8 }\n           rate: 48000\n          depth: { (int)16, (int)20, (int)24 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary + 1"
            }
        },
        "filename": "gstrsaudioparsers",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-audioparsers",
        "source": "gst-plugin-audioparsers",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rsclosedcaption": {
        "description": "GStreamer Rust Closed Caption Plugin",
        "elements": {
            "ccdetect": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "Detect if valid closed captions are present in a stream",
                "hierarchy": [
                    "GstCCDetect",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Video/ClosedCaption/Detect",
                "long-name": "Closed Caption Detect",
                "pad-templates": {
                    "sink": {
                        "caps": "closedcaption/x-cea-708:\n         format: { cc_data, cdp }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "closedcaption/x-cea-708:\n         format: { cc_data, cdp }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "cc608": {
                        "blurb": "Whether CEA608 captions (CC1/CC3) have been detected",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": false
                    },
                    "cc708": {
                        "blurb": "Whether CEA708 captions (cc_data) have been detected",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": false
                    },
                    "window": {
                        "blurb": "Window of time (in ns) to determine if captions exist in the stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10000000000",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "cctost2038anc": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Converts Closed Captions to ST-2038 ANC",
                "hierarchy": [
                    "GstCcToSt2038Anc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "pad-templates": {
                    "sink": {
                        "caps": "closedcaption/x-cea-608:\n         format: s334-1a\nclosedcaption/x-cea-708:\n         format: cdp\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "meta/x-st-2038:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "c-not-y-channel": {
                        "blurb": "Set the y_not_c_channel flag in the output",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "horizontal-offset": {
                        "blurb": "Horizontal offset of the output",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "4095",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "line-number": {
                        "blurb": "Line Number of the output",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "9",
                        "max": "2047",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "cdpserviceinject": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "Adds or updates CDP Service Description Information",
                "hierarchy": [
                    "GstCdpServiceInject",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/ClosedCaption",
                "pad-templates": {
                    "sink": {
                        "caps": "closedcaption/x-cea-708:\n         format: cdp\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "closedcaption/x-cea-708:\n         format: cdp\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "services": {
                        "blurb": "List of service information to add or update in the CDP",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "cea608overlay": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Renders CEA 608 closed caption meta over raw video frames",
                "hierarchy": [
                    "GstCea608Overlay",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Video/Overlay/Subtitle",
                "long-name": "Cea 608 overlay",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, BGR10x2_LE, RGB10x2_LE, r210, I422_10LE, I422_10BE, NV16_10LE40, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE16, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(ANY):\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, BGR10x2_LE, RGB10x2_LE, r210, I422_10LE, I422_10BE, NV16_10LE40, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE16, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "black-background": {
                        "blurb": "Whether a black background should be drawn behind text",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "field": {
                        "blurb": "The field to render the caption for when available, (-1=automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "1",
                        "min": "-1",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "timeout": {
                        "blurb": "Duration after which to erase overlay when no cc data has arrived for the selected field",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "18446744073709551615",
                        "min": "16000000000",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "cea608tocea708": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "Converts CEA-608 Closed Captions to CEA-708 Closed Captions",
                "hierarchy": [
                    "GstCea608ToCea708",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Converter",
                "pad-templates": {
                    "sink": {
                        "caps": "closedcaption/x-cea-608:\n         format: s334-1a\nclosedcaption/x-cea-608:\n         format: raw\n          field: { (int)0, (int)1 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "closedcaption/x-cea-708:\n         format: cc_data\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            },
            "cea608tojson": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Converts CEA-608 Closed Captions to JSON",
                "hierarchy": [
                    "GstCea608ToJson",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "CEA-608 to TT",
                "pad-templates": {
                    "sink": {
                        "caps": "closedcaption/x-cea-608:\n         format: raw\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-json:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "unbuffered": {
                        "blurb": "Whether captions should be output at display time, instead of waiting to determine durations. Useful with live input",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "cea608tott": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Converts CEA-608 Closed Captions to SRT/VTT timed text",
                "hierarchy": [
                    "GstCea608ToTt",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "CEA-608 to TT",
                "pad-templates": {
                    "sink": {
                        "caps": "closedcaption/x-cea-608:\n         format: raw\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-subtitle-vtt:\napplication/x-subtitle:\ntext/x-raw:\n         format: utf8\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            },
            "cea708mux": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "Combines multiple CEA-708 streams",
                "hierarchy": [
                    "GstCea708Mux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Muxer",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "closedcaption/x-cea-708:\n         format: cc_data\n      framerate: { (fraction)60/1, (fraction)60000/1001, (fraction)50/1, (fraction)30/1, (fraction)30000/1001, (fraction)25/1, (fraction)24/1, (fraction)24000/1001 }\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstCea708MuxSinkPad"
                    },
                    "src": {
                        "caps": "closedcaption/x-cea-708:\n         format: cc_data\n      framerate: { (fraction)60/1, (fraction)60000/1001, (fraction)50/1, (fraction)30/1, (fraction)30000/1001, (fraction)25/1, (fraction)24/1, (fraction)24000/1001 }\n",
                        "direction": "src",
                        "presence": "always",
                        "type": "GstAggregatorPad"
                    }
                },
                "properties": {
                    "force-live": {
                        "blurb": "Always operate in live mode and aggregate on timeout",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": true,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "max-time": {
                        "blurb": "Maximum amount of time that captions can be stored before output",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "cea708overlay": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "Renders CEA 708 closed caption meta over raw video frames",
                "hierarchy": [
                    "GstCea708Overlay",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Video/Overlay/Subtitle",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, BGR10x2_LE, RGB10x2_LE, r210, I422_10LE, I422_10BE, NV16_10LE40, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE16, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(ANY):\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, BGR10x2_LE, RGB10x2_LE, r210, I422_10LE, I422_10BE, NV16_10LE40, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE16, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "cea608-channel": {
                        "blurb": "The cea608 channel (CC1-4) to render the caption for when available, (-1=automatic, 0=disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "4",
                        "min": "-1",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "safe-title-height": {
                        "blurb": "Ratio of the video height to use as the safe area for caption display",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.8",
                        "max": "1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "safe-title-width": {
                        "blurb": "Ratio of the video width to use as the safe area for caption display",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.8",
                        "max": "1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "service": {
                        "blurb": "The service to render the caption for when available, (-1=automatic, 0=disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "31",
                        "min": "-1",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "timeout": {
                        "blurb": "Duration after which to erase overlay when no cc data has arrived for the selected service/channel",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "18446744073709551615",
                        "min": "16000000000",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "jsontovtt": {
                "author": "Jan Schmidt <jan@centricular.com>",
                "description": "Converts JSON to WebVTT",
                "hierarchy": [
                    "GstJsonToVtt",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "JSON to WebVTT",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-json:\n         format: cea608\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-subtitle-vtt-fragmented:\n inline-headers: true\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "timeout": {
                        "blurb": "Duration after which to erase text when no data has arrived",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "18446744073709551615",
                        "min": "16000000000",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "mccenc": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Encodes MCC Closed Caption Files",
                "hierarchy": [
                    "GstMccEnc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Encoder/ClosedCaption",
                "long-name": "Mcc Encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "closedcaption/x-cea-708:\n         format: cdp\n      framerate: { (fraction)24/1, (fraction)25/1, (fraction)30000/1001, (fraction)30/1, (fraction)50/1, (fraction)60000/1001, (fraction)60/1 }\nclosedcaption/x-cea-608:\n         format: s334-1a\n      framerate: { (fraction)24/1, (fraction)25/1, (fraction)30000/1001, (fraction)30/1, (fraction)50/1, (fraction)60000/1001, (fraction)60/1 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-mcc:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "creation-date": {
                        "blurb": "Creation date for the output file",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GDateTime",
                        "writable": true
                    },
                    "uuid": {
                        "blurb": "UUID for the output file",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "mccparse": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Parses MCC Closed Caption Files",
                "hierarchy": [
                    "GstMccParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Parser/ClosedCaption",
                "long-name": "Mcc Parse",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-mcc:\n        version: { (int)1, (int)2 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "closedcaption/x-cea-708:\n         format: cdp\n      framerate: [ 1/2147483647, 2147483647/1 ]\nclosedcaption/x-cea-608:\n         format: s334-1a\n      framerate: [ 1/2147483647, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            },
            "sccenc": {
                "author": "Sebastian Dröge <sebastian@centricular.com>, Jordan Petridis <jordan@centricular.com>",
                "description": "Encodes SCC Closed Caption Files",
                "hierarchy": [
                    "GstSccEnc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Encoder/ClosedCaption",
                "long-name": "Scc Encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "closedcaption/x-cea-608:\n         format: raw\n      framerate: { (fraction)30000/1001, (fraction)30/1 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-scc:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "output-padding": {
                        "blurb": "Whether the encoder should output padding captions. The element will never add padding, but will encode padding buffers it receives if this property is set to true.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "sccparse": {
                "author": "Sebastian Dröge <sebastian@centricular.com>, Jordan Petridis <jordan@centricular.com>",
                "description": "Parses SCC Closed Caption Files",
                "hierarchy": [
                    "GstSccParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Parser/ClosedCaption",
                "long-name": "Scc Parse",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-scc:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "closedcaption/x-cea-608:\n         format: raw\n      framerate: { (fraction)30000/1001, (fraction)30/1 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            },
            "st2038ancdemux": {
                "author": "Tim-Philipp Müller <tim centricular com>",
                "description": "Splits individual ancillary metadata streams from an SMPTE ST-2038 stream",
                "hierarchy": [
                    "GstSt2038AncDemux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Metadata/Video/Demuxer",
                "pad-templates": {
                    "anc_%%02x_%%02x_at_%%u_%%u": {
                        "caps": "meta/x-st-2038:\n      alignment: packet\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "sink": {
                        "caps": "meta/x-st-2038:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "meta/x-st-2038:\n      alignment: packet\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            },
            "st2038ancmux": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Combines multiple ST2038 Anc streams",
                "hierarchy": [
                    "GstSt2038AncMux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Muxer",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "meta/x-st-2038:\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstSt2038AncMuxSinkPad"
                    },
                    "src": {
                        "caps": "meta/x-st-2038:\n      alignment: { (string)packet, (string)line }\n",
                        "direction": "src",
                        "presence": "always",
                        "type": "GstAggregatorPad"
                    }
                },
                "rank": "none"
            },
            "st2038anctocc": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Converts ST-2038 ANC to Closed Captions",
                "hierarchy": [
                    "GstSt2038AncToCc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "pad-templates": {
                    "sink": {
                        "caps": "meta/x-st-2038:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src_cea608": {
                        "caps": "closedcaption/x-cea-608:\n         format: s334-1a\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "src_cea708": {
                        "caps": "closedcaption/x-cea-708:\n         format: cdp\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "rank": "none"
            },
            "transcriberbin": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Transcribes audio and adds it as closed captions",
                "hierarchy": [
                    "GstTranscriberBin",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Audio / Video / Text",
                "long-name": "TranscriberBin",
                "pad-templates": {
                    "sink_audio": {
                        "caps": "audio/x-raw:\n",
                        "direction": "sink",
                        "presence": "always",
                        "type": "GstTranscriberSinkPad"
                    },
                    "sink_audio_%%u": {
                        "caps": "audio/x-raw:\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstTranscriberSinkPad"
                    },
                    "sink_video": {
                        "caps": "video/x-raw(ANY):\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src_audio": {
                        "caps": "audio/x-raw:\n",
                        "direction": "src",
                        "presence": "always"
                    },
                    "src_audio_%%u": {
                        "caps": "audio/x-raw:\n",
                        "direction": "src",
                        "presence": "sometimes",
                        "type": "GstTranscriberSrcPad"
                    },
                    "src_subtitle_%%s": {
                        "caps": "text/x-raw:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "src_subtitle_%%s_%%u": {
                        "caps": "text/x-raw:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "src_synthesis_%%s": {
                        "caps": "audio/x-raw:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "src_synthesis_%%s_%%u": {
                        "caps": "audio/x-raw:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "src_video": {
                        "caps": "video/x-raw(ANY):\n",
                        "direction": "src",
                        "presence": "always"
                    },
                    "unsynced_src": {
                        "caps": "application/x-json:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "unsynced_src_%%u": {
                        "caps": "application/x-json:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "unsynced_translate_src_%%u": {
                        "caps": "application/x-json:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "unsynced_translate_src_%%u_%%u": {
                        "caps": "application/x-json:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "accumulate-time": {
                        "blurb": "Cut-off time for textwrap accumulation, in milliseconds (0=do not accumulate). Set this to a non-default value if you plan to switch to pop-on mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "caption-source": {
                        "blurb": "Caption source to use. If \"Transcription\" or \"Inband\" is selected, the caption meta of the other source will be dropped by transcriberbin",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "both (0)",
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstTranscriberBinCaptionSource",
                        "writable": true
                    },
                    "cc-caps": {
                        "blurb": "The expected format of the closed captions",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "closedcaption/x-cea-608, format=(string)raw",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Amount of milliseconds to allow the transcriber",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "lateness": {
                        "blurb": "Amount of milliseconds to pass as lateness to the transcriber",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "mux-method": {
                        "blurb": "The method for muxing multiple transcription streams",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "cea608 (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstTranscriberBinMuxMethod",
                        "writable": true
                    },
                    "translate-latency": {
                        "blurb": "Amount of extra milliseconds to allow for translating",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "500",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "translationbin": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Transcribes audio and translates it",
                "hierarchy": [
                    "GstTranslationBin",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Audio / Text",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "src",
                        "presence": "always"
                    },
                    "translate_src_%%u": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "src",
                        "presence": "request",
                        "type": "GstTranslationBinTranslationSrcPad"
                    }
                },
                "properties": {
                    "language-code": {
                        "blurb": "The language of the input stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "en-US",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "lateness": {
                        "blurb": "Amount of milliseconds to offset transcription by",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "transcribe-latency": {
                        "blurb": "Amount of milliseconds to allow for transcription",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "transcriber": {
                        "blurb": "The transcriber element to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "translate-latency": {
                        "blurb": "Amount of milliseconds to allow for translation",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "500",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "tttocea608": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Converts timed text to CEA-608 Closed Captions",
                "hierarchy": [
                    "GstTtToCea608",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "TT to CEA-608",
                "pad-templates": {
                    "sink": {
                        "caps": "text/x-raw:\n         format: utf8\napplication/x-json:\n         format: cea608\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "closedcaption/x-cea-608:\n         format: raw\n      framerate: [ 1/2147483647, 2147483647/1 ]\n          field: 0\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "mode": {
                        "blurb": "Which mode to operate in",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "roll-up2 (2)",
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstTtToCea608Mode",
                        "writable": true
                    },
                    "origin-column": {
                        "blurb": "Origin column",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "31",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "origin-row": {
                        "blurb": "Origin row, (-1=automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "14",
                        "min": "-1",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "roll-up-timeout": {
                        "blurb": "Duration after which to erase display memory in roll-up mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "speaker-prefix": {
                        "blurb": "The prefix to add when outputting a carriage return on speaker change",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "tttocea708": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "Converts timed text to CEA-708 Closed Captions",
                "hierarchy": [
                    "GstTtToCea708",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "pad-templates": {
                    "sink": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "closedcaption/x-cea-708:\n         format: cc_data\n      framerate: [ 1/2147483647, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "cea608-channel": {
                        "blurb": "Write CEA 608 compatibility bytes with this channel, 0 = disabled (only 1 and 3 currently supported)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "4",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "mode": {
                        "blurb": "Which mode to operate in",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "roll-up (2)",
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstTtToCea708Mode",
                        "writable": true
                    },
                    "origin-column": {
                        "blurb": "Origin column",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "31",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "origin-row": {
                        "blurb": "Origin row, (-1=automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "14",
                        "min": "-1",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "roll-up-rows": {
                        "blurb": "Number of rows to use in roll up mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2",
                        "max": "31",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "roll-up-timeout": {
                        "blurb": "Duration after which to erase display memory in roll-up mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "service-number": {
                        "blurb": "Write DTVCC packets using this service",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "63",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "speaker-prefix": {
                        "blurb": "The prefix to add when outputting a carriage return on speaker change",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "tttojson": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Encodes Timed Text to JSON",
                "hierarchy": [
                    "GstTtToJson",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Encoder/ClosedCaption",
                "long-name": "Timed text to JSON encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-json:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "mode": {
                        "blurb": "Which mode to operate in",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "roll-up2 (2)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstTtToCea608Mode",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstrsclosedcaption",
        "license": "MPL",
        "other-types": {
            "GstCea708MuxSinkPad": {
                "hierarchy": [
                    "GstCea708MuxSinkPad",
                    "GstAggregatorPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "discarded-services": {
                        "blurb": "List of services to discard",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    }
                }
            },
            "GstSt2038AncMuxSinkPad": {
                "hierarchy": [
                    "GstSt2038AncMuxSinkPad",
                    "GstAggregatorPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object"
            },
            "GstTranscriberBinCaptionSource": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Both",
                        "name": "both",
                        "value": "0"
                    },
                    {
                        "desc": "Transcription",
                        "name": "transcription",
                        "value": "1"
                    },
                    {
                        "desc": "Inband",
                        "name": "inband",
                        "value": "2"
                    }
                ]
            },
            "GstTranscriberBinMuxMethod": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Cea608",
                        "name": "cea608",
                        "value": "0"
                    },
                    {
                        "desc": "Cea708",
                        "name": "cea708",
                        "value": "1"
                    }
                ]
            },
            "GstTranscriberSinkPad": {
                "hierarchy": [
                    "GstTranscriberSinkPad",
                    "GstGhostPad",
                    "GstProxyPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "language-code": {
                        "blurb": "The language of the input stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "en-US",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "language-filters": {
                        "blurb": "A map of language codes to bin descriptions, e.g. text-filters=\"languages, fr=regex\" will filter words out of the transcriber through the regex element",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "mode": {
                        "blurb": "Which closed caption mode to operate in",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "roll-up2 (2)",
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstTtToCea608Mode",
                        "writable": true
                    },
                    "passthrough": {
                        "blurb": "Whether transcription should occur",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "subtitle-languages": {
                        "blurb": "A map of language codes to bin descriptions, e.g. subtitle-languages=\"languages, fr=textwrap lines=2 accumulate-time=5000000000\" will use the textwrap element before outputting the subtitles",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "synthesis-languages": {
                        "blurb": "A map of language codes to bin descriptions, e.g. synthesis-languages=\"languages, fr=awspolly\" will use the awspolly element to synthesize speech from French translations",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "transcriber": {
                        "blurb": "The transcriber element to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "transcription-mix-matrix": {
                        "blurb": "Initial transformation matrix for the transcriber audioconvert",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    },
                    "translation-languages": {
                        "blurb": "A map of language codes to caption channels, e.g. translation-languages=\"languages, transcript={CC1, 708_1}, fr={708_2, CC3}\" will map the French translation to CC1/service 1 and the original transcript to CC3/service 2",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "languages, transcript=(string)cc1;",
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    }
                }
            },
            "GstTranscriberSrcPad": {
                "hierarchy": [
                    "GstTranscriberSrcPad",
                    "GstGhostPad",
                    "GstProxyPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object"
            },
            "GstTranslationBinTranslationSrcPad": {
                "hierarchy": [
                    "GstTranslationBinTranslationSrcPad",
                    "GstGhostPad",
                    "GstProxyPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "language-code": {
                        "blurb": "The language of the output stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "fr-FR",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "translator": {
                        "blurb": "The translator element in use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": false
                    }
                }
            },
            "GstTtToCea608Mode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "PopOn",
                        "name": "pop-on",
                        "value": "0"
                    },
                    {
                        "desc": "PaintOn",
                        "name": "paint-on",
                        "value": "1"
                    },
                    {
                        "desc": "RollUp2",
                        "name": "roll-up2",
                        "value": "2"
                    },
                    {
                        "desc": "RollUp3",
                        "name": "roll-up3",
                        "value": "3"
                    },
                    {
                        "desc": "RollUp4",
                        "name": "roll-up4",
                        "value": "4"
                    }
                ]
            },
            "GstTtToCea708Mode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "PopOn",
                        "name": "pop-on",
                        "value": "0"
                    },
                    {
                        "desc": "PaintOn",
                        "name": "paint-on",
                        "value": "1"
                    },
                    {
                        "desc": "RollUp",
                        "name": "roll-up",
                        "value": "2"
                    }
                ]
            }
        },
        "package": "gst-plugin-closedcaption",
        "source": "gst-plugin-closedcaption",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rsfile": {
        "description": "GStreamer Rust File Source/Sink Plugin",
        "elements": {
            "rsfilesink": {
                "author": "François Laignel <fengalin@free.fr>, Luis de Bethencourt <luisbg@osg.samsung.com>",
                "description": "Write stream to a file",
                "hierarchy": [
                    "GstRsFileSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Sink/File",
                "long-name": "File Sink",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "location": {
                        "blurb": "Location of the file to write",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "rsfilesrc": {
                "author": "François Laignel <fengalin@free.fr>, Sebastian Dröge <sebastian@centricular.com>",
                "description": "Read stream from a file",
                "hierarchy": [
                    "GstRsFileSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Source/File",
                "long-name": "File Source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "location": {
                        "blurb": "Location of the file to read from",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstrsfile",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-file",
        "source": "gst-plugin-file",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rsflv": {
        "description": "GStreamer Rust FLV Plugin",
        "elements": {
            "rsflvdemux": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Demuxes FLV Streams",
                "hierarchy": [
                    "GstRsFlvDemux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Demuxer",
                "long-name": "FLV Demuxer",
                "pad-templates": {
                    "audio": {
                        "caps": "audio/mpeg:\n    mpegversion: 1\naudio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: { U8, S16LE }\naudio/x-adpcm:\n         layout: swf\naudio/x-nellymoser:\naudio/x-alaw:\naudio/x-mulaw:\naudio/mpeg:\n    mpegversion: 4\n         framed: true\n  stream-format: raw\naudio/x-speex:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "sink": {
                        "caps": "video/x-flv:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "video": {
                        "caps": "video/x-flash-video:\n     flvversion: 1\nvideo/x-flash-screen:\nvideo/x-vp6-flash:\nvideo/x-vp6-flash-alpha:\nvideo/x-flash-screen2:\nvideo/x-h264:\n  stream-format: avc\nvideo/x-h263:\nvideo/mpeg:\n    mpegversion: 4\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstrsflv",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-flavors",
        "source": "gst-plugin-flavors",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rsinter": {
        "description": "GStreamer Inter Plugin",
        "elements": {
            "intersink": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Inter Sink",
                "hierarchy": [
                    "GstInterSink",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic/Sink",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "event-types": {
                        "blurb": "Forward Event Types (default EOS)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    },
                    "producer-name": {
                        "blurb": "Producer Name to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "sync": {
                        "blurb": "Sync on the clock",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "intersrc": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Inter Src",
                "hierarchy": [
                    "GstInterSrc",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic/Src",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "max-buffers": {
                        "blurb": "Maximum number of buffers to queue (0=unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-bytes": {
                        "blurb": "Maximum number of bytes to queue (0=unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-time": {
                        "blurb": "Maximum number of nanoseconds to queue (0=unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "500000000",
                        "max": "9223372036854775807",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "producer-name": {
                        "blurb": "Producer Name to consume from",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstrsinter",
        "license": "MPL-2.0",
        "other-types": {},
        "package": "gst-plugin-inter",
        "source": "gst-plugin-inter",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rsonvif": {
        "description": "GStreamer Rust ONVIF Plugin",
        "elements": {
            "onvifmetadatacombiner": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "ONVIF metadata combiner",
                "hierarchy": [
                    "GstOnvifMetadataCombiner",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Video/Metadata/Combiner",
                "long-name": "ONVIF metadata combiner",
                "pad-templates": {
                    "media": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always",
                        "type": "GstAggregatorPad"
                    },
                    "meta": {
                        "caps": "application/x-onvif-metadata:\n         parsed: true\n",
                        "direction": "sink",
                        "presence": "always",
                        "type": "GstAggregatorPad"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            },
            "onvifmetadataextractor": {
                "author": "Benjamin Gaignard <benjamin.gaignard@collabora.com>",
                "description": "Extract the ONVIF GstMeta into a separate stream",
                "hierarchy": [
                    "GstOnvifMetadataExtractor",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Video/Metadata",
                "pad-templates": {
                    "meta_src": {
                        "caps": "application/x-onvif-metadata:\n",
                        "direction": "src",
                        "presence": "always"
                    },
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "remove-onvif-metadata": {
                        "blurb": "Remove ONVIF metadata from output stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "onvifmetadataoverlay": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Renders ONVIF analytics meta over raw video frames",
                "hierarchy": [
                    "GstOnvifMetadataOverlay",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Video/Overlay",
                "long-name": "ONVIF Metadata overlay",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, BGR10x2_LE, RGB10x2_LE, r210, I422_10LE, I422_10BE, NV16_10LE40, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE16, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, BGR10x2_LE, RGB10x2_LE, r210, I422_10LE, I422_10BE, NV16_10LE40, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE16, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "font-desc": {
                        "blurb": "Pango font description of font to be used for rendering",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "monospace 12",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "onvifmetadataparse": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Parses ONVIF Timed XML Metadata",
                "hierarchy": [
                    "GstOnvifMetadataParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Metadata/Parser",
                "long-name": "ONVIF Metadata Parser",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-onvif-metadata:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-onvif-metadata:\n         parsed: true\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "latency": {
                        "blurb": "Maximum latency to introduce for reordering metadata (max=auto: 6s if unparsed input, 0s if parsed input)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-lateness": {
                        "blurb": "Drop metadata that delayed by more than this",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "200000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "rtponvifmetadatadepay": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "ONVIF metadata RTP depayloader",
                "hierarchy": [
                    "GstOnvifMetadataDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Depayloader/Network/RTP",
                "long-name": "ONVIF metadata RTP depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: application\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: VND.ONVIF.METADATA\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-onvif-metadata:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            },
            "rtponvifmetadatapay": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "ONVIF metadata RTP payloader",
                "hierarchy": [
                    "GstOnvifMetadataPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Payloader/Network/RTP",
                "long-name": "ONVIF metadata RTP payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-onvif-metadata:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: application\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: VND.ONVIF.METADATA\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstrsonvif",
        "license": "MPL-2.0",
        "other-types": {},
        "package": "gst-plugin-onvif",
        "source": "gst-plugin-onvif",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rspng": {
        "description": "GStreamer Rust PNG encoder/decoder",
        "elements": {
            "rspngenc": {
                "author": "Natanael Mojica <neithanmo@gmail>",
                "description": "PNG encoder",
                "hierarchy": [
                    "GstRsPngEnc",
                    "GstVideoEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset"
                ],
                "klass": "Encoder/Video",
                "long-name": "PNG encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { GRAY8, GRAY16_BE, RGB, RGBA }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "image/png:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "compression-level": {
                        "blurb": "Selects the compression algorithm to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "default (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstRsPngCompressionLevel",
                        "writable": true
                    },
                    "filter": {
                        "blurb": "Selects the filter type to applied",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "Adaptive (5)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstRsPngFilter",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstrspng",
        "license": "MIT/X11",
        "other-types": {
            "GstRsPngCompressionLevel": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Default: Use the default compression level.",
                        "name": "default",
                        "value": "0"
                    },
                    {
                        "desc": "Fastest: Use the fastest compression level.",
                        "name": "fastest",
                        "value": "1"
                    },
                    {
                        "desc": "Fast: A fast compression algorithm.",
                        "name": "fast",
                        "value": "2"
                    },
                    {
                        "desc": "Balanced: Uses the algorithm with balanced results.",
                        "name": "balanced",
                        "value": "3"
                    },
                    {
                        "desc": "High: Use the highest compression level.",
                        "name": "high",
                        "value": "4"
                    }
                ]
            },
            "GstRsPngFilter": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "NoFilter: No filtering applied to the output.",
                        "name": "nofilter",
                        "value": "0"
                    },
                    {
                        "desc": "Sub: filter applied to each pixel.",
                        "name": "sub",
                        "value": "1"
                    },
                    {
                        "desc": "Up: Up filter similar to Sub.",
                        "name": "up",
                        "value": "2"
                    },
                    {
                        "desc": "Avg: The Average filter uses the average of the two neighboring pixels.",
                        "name": "avg",
                        "value": "3"
                    },
                    {
                        "desc": "Paeth: The Paeth filter computes a simple linear function of the three neighboring pixels.",
                        "name": "paeth",
                        "value": "4"
                    },
                    {
                        "desc": "Adaptive: Uses heuristics to select the best filter for every row.",
                        "name": "Adaptive",
                        "value": "5"
                    }
                ]
            }
        },
        "package": "gst-plugin-png",
        "source": "gst-plugin-png",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rsrtp": {
        "description": "GStreamer Rust RTP Plugin",
        "elements": {
            "rtpL16depay2": {
                "author": "Tim-Philipp Müller <tim centricular com>",
                "description": "Depayload 16-bit raw audio (L16) from RTP packets",
                "hierarchy": [
                    "GstRtpL16Depay2",
                    "GstRtpLinearAudioDepay",
                    "GstRtpBaseDepay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: L16\napplication/x-rtp:\n          media: audio\n     clock-rate: [ 1, 2147483647 ]\n        payload: { (int)10, (int)11 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: S16BE\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtpL16pay2": {
                "author": "Tim-Philipp Müller <tim centricular com>",
                "description": "Payload 16-bit raw audio (L16) into RTP packets (RFC 3551)",
                "hierarchy": [
                    "GstRtpL16Pay2",
                    "GstRtpLinearAudioPay",
                    "GstRtpBaseAudioPay2",
                    "GstRtpBasePay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: S16BE\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: L16\napplication/x-rtp:\n          media: audio\n     clock-rate: 44100\n        payload: { (int)10, (int)11 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtpL20depay": {
                "author": "Tim-Philipp Müller <tim centricular com>",
                "description": "Depayload 20-bit raw audio (L20) from RTP packets",
                "hierarchy": [
                    "GstRtpL20Depay2",
                    "GstRtpLinearAudioDepay",
                    "GstRtpBaseDepay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: L20\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: S20BE\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtpL20pay": {
                "author": "Tim-Philipp Müller <tim centricular com>",
                "description": "Payload 20-bit raw audio (L20) into RTP packets (RFC 3551)",
                "hierarchy": [
                    "GstRtpL20Pay",
                    "GstRtpLinearAudioPay",
                    "GstRtpBaseAudioPay2",
                    "GstRtpBasePay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: S20BE\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: L20\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtpL24depay2": {
                "author": "Tim-Philipp Müller <tim centricular com>",
                "description": "Depayload 24-bit raw audio (L24) from RTP packets",
                "hierarchy": [
                    "GstRtpL24Depay2",
                    "GstRtpLinearAudioDepay",
                    "GstRtpBaseDepay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: L24\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: S24BE\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtpL24pay2": {
                "author": "Tim-Philipp Müller <tim centricular com>",
                "description": "Payload 24-bit raw audio (L24) into RTP packets (RFC 3551)",
                "hierarchy": [
                    "GstRtpL24Pay2",
                    "GstRtpLinearAudioPay",
                    "GstRtpBaseAudioPay2",
                    "GstRtpBasePay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: S24BE\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: L24\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtpL8depay2": {
                "author": "Tim-Philipp Müller <tim centricular com>",
                "description": "Depayload 8-bit raw audio (L8) from RTP packets",
                "hierarchy": [
                    "GstRtpL8Depay2",
                    "GstRtpLinearAudioDepay",
                    "GstRtpBaseDepay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: L8\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: U8\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtpL8pay2": {
                "author": "Tim-Philipp Müller <tim centricular com>",
                "description": "Payload 8-bit raw audio (L8) into RTP packets (RFC 3551)",
                "hierarchy": [
                    "GstRtpL8Pay2",
                    "GstRtpLinearAudioPay",
                    "GstRtpBaseAudioPay2",
                    "GstRtpBasePay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: U8\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n  encoding-name: L8\n     clock-rate: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtpac3depay2": {
                "author": "Tim-Philipp Müller <tim centricular com>",
                "description": "Depayload an AC-3 Audio Stream from RTP packets (RFC 4184)",
                "hierarchy": [
                    "GstRtpAc3Depay",
                    "GstRtpBaseDepay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n  encoding-name: AC3\n     clock-rate: { (int)48000, (int)44100, (int)32000 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-ac3:\n       channels: [ 1, 6 ]\n           rate: { (int)48000, (int)44100, (int)32000 }\n         framed: true\n      alignment: frame\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtpac3pay2": {
                "author": "Tim-Philipp Müller <tim centricular com>",
                "description": "Payload an AC-3 Audio Elementary Stream into RTP packets (RFC 4184)",
                "hierarchy": [
                    "GstRtpAc3Pay",
                    "GstRtpBasePay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-ac3:\n           rate: { (int)48000, (int)44100, (int)32000 }\n       channels: [ 1, 6 ]\n         framed: true\n      alignment: frame\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n  encoding-name: AC3\n     clock-rate: { (int)48000, (int)44100, (int)32000 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "aggregate-mode": {
                        "blurb": "Whether to send out audio frames immediately or aggregate them until a packet is full.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "auto (-1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRtpAc3PayAggregateMode",
                        "writable": true
                    },
                    "max-ptime": {
                        "blurb": "Maximum duration of the packet data in ns (-1 = unlimited up to MTU)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "rtpamrdepay2": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Depayload an AMR audio stream from RTP packets (RFC 3267)",
                "hierarchy": [
                    "GstRtpAmrDepay2",
                    "GstRtpBaseDepay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n  encoding-name: AMR\n     clock-rate: 8000\napplication/x-rtp:\n          media: audio\n  encoding-name: AMR-WB\n     clock-rate: 16000\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/AMR:\n       channels: 1\n           rate: 8000\naudio/AMR-WB:\n       channels: 1\n           rate: 16000\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtpamrpay2": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Payload an AMR audio stream into RTP packets (RFC 3267)",
                "hierarchy": [
                    "GstRtpAmrPay2",
                    "GstRtpBasePay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/AMR:\n       channels: 1\n           rate: 8000\naudio/AMR-WB:\n       channels: 1\n           rate: 16000\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n  encoding-name: AMR\n     clock-rate: 8000\nencoding-params: 1\n    octet-align: { (string)0, (string)1 }\n            crc: 0\n robust-sorting: 0\n   interleaving: 0\napplication/x-rtp:\n          media: audio\n  encoding-name: AMR-WB\n     clock-rate: 16000\nencoding-params: 1\n    octet-align: { (string)0, (string)1 }\n            crc: 0\n robust-sorting: 0\n   interleaving: 0\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "aggregate-mode": {
                        "blurb": "Whether to send out audio frames immediately or aggregate them until a packet is full.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "auto (-1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRtpAmrPayAggregateMode",
                        "writable": true
                    },
                    "alignment-threshold": {
                        "blurb": "Timestamp alignment threshold in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "40000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "discont-wait": {
                        "blurb": "Window of time in nanoseconds to wait before creating a discontinuity",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-ptime": {
                        "blurb": "Maximum duration of the packet data in ns (-1 = unlimited up to MTU)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "rtpav1depay": {
                "author": "Vivienne Watermeier <vwatermeier@igalia.com>",
                "description": "Depayload AV1 from RTP packets",
                "hierarchy": [
                    "GstRtpAv1Depay",
                    "GstRtpBaseDepay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP AV1 Depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: video\n     clock-rate: 90000\n  encoding-name: AV1\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-av1:\n         parsed: true\n  stream-format: obu-stream\n      alignment: obu\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "request-keyframe": {
                        "blurb": "Request new keyframe when packet loss is detected",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "wait-for-keyframe": {
                        "blurb": "Wait for the next keyframe after packet loss",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "rtpav1pay": {
                "author": "Vivienne Watermeier <vwatermeier@igalia.com>",
                "description": "Payload AV1 as RTP packets",
                "hierarchy": [
                    "GstRtpAv1Pay",
                    "GstRtpBasePay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP AV1 payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-av1:\n         parsed: true\n  stream-format: obu-stream\n      alignment: { (string)tu, (string)frame, (string)obu }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: video\n     clock-rate: 90000\n  encoding-name: AV1\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtpgccbwe": {
                "author": "Thibault Saunier <tsaunier@igalia.com>",
                "description": "Estimates current network bandwidth using the Google Congestion Control algorithm notifying about it through the 'bitrate' property",
                "hierarchy": [
                    "GstRtpGCCBwE",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Network/WebRTC/RTP/Filter",
                "long-name": "Google Congestion Control bandwidth estimator",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "estimated-bitrate": {
                        "blurb": "Currently estimated bitrate. Can be set before starting\n                     the element to configure the starting bitrate, in which case the\n                     encoder should also use it as target bitrate",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2048000",
                        "max": "-1",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "estimator": {
                        "blurb": "How to calculate the delay estimate that will be compared against the dynamic delay threshold.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "kalman (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstRtpGCCBwEEstimator",
                        "writable": true
                    },
                    "max-bitrate": {
                        "blurb": "Maximum bitrate to use (in bit/sec) when computing it through the bandwidth estimation algorithm",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "8192000",
                        "max": "-1",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "min-bitrate": {
                        "blurb": "Minimal bitrate to use (in bit/sec) when computing it through the bandwidth estimation algorithm",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000",
                        "max": "-1",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "rtpjpegdepay2": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Depayload a JPEG Video stream from RTP packets (RFC 2435)",
                "hierarchy": [
                    "GstRtpJpegDepay2",
                    "GstRtpBaseDepay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: video\n        payload: 26\n     clock-rate: 90000\napplication/x-rtp:\n          media: video\n  encoding-name: JPEG\n     clock-rate: 90000\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "image/jpeg:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtpjpegpay2": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Payload a JPEG Video stream to RTP packets (RFC 2435)",
                "hierarchy": [
                    "GstRtpJpegPay2",
                    "GstRtpBasePay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "image/jpeg:\n         parsed: true\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\n     sof-marker: 0\n     colorspace: sYUV\n       sampling: { (string)YCbCr-4:2:0, (string)YCbCr-4:2:2 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: video\n        payload: 26\n     clock-rate: 90000\napplication/x-rtp:\n          media: video\n  encoding-name: JPEG\n     clock-rate: 90000\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtpklvdepay2": {
                "author": "Tim-Philipp Müller <tim centricular com>",
                "description": "Depayload an SMPTE ST 336 KLV metadata stream from RTP packets (RFC 6597)",
                "hierarchy": [
                    "GstRtpKlvDepay2",
                    "GstRtpBaseDepay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: application\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: SMPTE336M\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "meta/x-klv:\n         parsed: true\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtpklvpay2": {
                "author": "Tim-Philipp Müller <tim centricular com>",
                "description": "Payload an SMPTE ST 336 KLV metadata stream into RTP packets (RFC 6597)",
                "hierarchy": [
                    "GstRtpKlvPay2",
                    "GstRtpBasePay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "meta/x-klv:\n         parsed: true\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: application\n  encoding-name: SMPTE336M\n     clock-rate: 90000\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtpmp2tdepay2": {
                "author": "Tim-Philipp Müller <tim centricular com>",
                "description": "Depayload an MPEG Transport Stream from RTP packets (RFC 2250)",
                "hierarchy": [
                    "GstRtpMP2TDepay2",
                    "GstRtpBaseDepay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: video\n     clock-rate: 90000\n  encoding-name: MP2T\napplication/x-rtp:\n          media: video\n        payload: 33\n     clock-rate: 90000\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/mpegts:\n     packetsize: { (int)188, (int)192, (int)204, (int)208 }\n   systemstream: true\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "skip-first-bytes": {
                        "blurb": "Number of bytes to skip at the beginning of the payload",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "rtpmp2tpay2": {
                "author": "Tim-Philipp Müller <tim centricular com>",
                "description": "Payload an MPEG Transport Stream into RTP packets (RFC 2250)",
                "hierarchy": [
                    "GstRtpMP2TPay2",
                    "GstRtpBasePay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "video/mpegts:\n     packetsize: { (int)188, (int)192, (int)204, (int)208 }\n   systemstream: true\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: video\n     clock-rate: 90000\n  encoding-name: MP2T\napplication/x-rtp:\n          media: video\n        payload: 33\n     clock-rate: 90000\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtpmp4adepay2": {
                "author": "François Laignel <francois centricular com>",
                "description": "Depayload an MPEG-4 Audio bitstream (e.g. AAC) from RTP packets (RFC 3016)",
                "hierarchy": [
                    "GstRtpMpeg4AudioDepay",
                    "GstRtpBaseDepay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: MP4A-LATM\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/mpeg:\n    mpegversion: 4\n         framed: true\n  stream-format: raw\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtpmp4apay2": {
                "author": "François Laignel <francois centricular com>",
                "description": "Payload an MPEG-4 Audio bitstream (e.g. AAC) into RTP packets (RFC 3016)",
                "hierarchy": [
                    "GstRtpMpeg4AudioPay",
                    "GstRtpBasePay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/mpeg:\n    mpegversion: 4\n         framed: true\n  stream-format: raw\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: MP4A-LATM\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtpmp4gdepay2": {
                "author": "François Laignel <francois centricular com>",
                "description": "Depayload MPEG-4 Generic elementary streams from RTP packets (RFC 3640)",
                "hierarchy": [
                    "GstRtpMpeg4GenericDepay",
                    "GstRtpBaseDepay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: { (string)audio, (string)video }\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: MPEG4-GENERIC\n           mode: { (string)generic, (string)AAC-lbr, (string)AAC-hbr, (string)aac-hbr }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/mpeg:\n    mpegversion: 4\n   systemstream: false\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtpmp4gpay2": {
                "author": "François Laignel <francois centricular com>",
                "description": "Payload an MPEG-4 Generic elementary stream into RTP packets (RFC 3640)",
                "hierarchy": [
                    "GstRtpMpeg4GenericPay",
                    "GstRtpBasePay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "video/mpeg:\n    mpegversion: 4\n   systemstream: false\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: { (string)audio, (string)video }\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: MPEG4-GENERIC\n     streamtype: { (string)4, (string)5 }\n           mode: { (string)generic, (string)AAC-lbr, (string)AAC-hbr, (string)aac-hbr }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "aggregate-mode": {
                        "blurb": "Whether to send out AUs immediately or aggregate them until a packet is full.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "auto (-1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRtpMpeg4GenericPayAggregateMode",
                        "writable": true
                    },
                    "max-ptime": {
                        "blurb": "Maximum duration of the packet data in ns (-1 = unlimited up to MTU)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "rtpopusdepay2": {
                "author": "Tim-Philipp Müller <tim centricular com>",
                "description": "Depayload an Opus audio stream from RTP packets (RFC 7587)",
                "hierarchy": [
                    "GstRtpOpusDepay2",
                    "GstRtpBaseDepay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n  encoding-name: { (string)OPUS, (string)MULTIOPUS }\n     clock-rate: 48000\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-opus:\nchannel-mapping-family: [ 0, 1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtpopuspay2": {
                "author": "Tim-Philipp Müller <tim centricular com>",
                "description": "Payload an Opus audio stream into RTP packets (RFC 7587)",
                "hierarchy": [
                    "GstRtpOpusPay2",
                    "GstRtpBasePay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-opus:\nchannel-mapping-family: 0\naudio/x-opus:\nchannel-mapping-family: 0\n       channels: [ 1, 2 ]\naudio/x-opus:\nchannel-mapping-family: 1\n       channels: [ 3, 255 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n  encoding-name: { (string)OPUS, (string)MULTIOPUS }\n     clock-rate: 48000\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "dtx": {
                        "blurb": "Do not send out empty packets for transmission (requires opusenc dtx=true)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "rtppcmadepay2": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Depayload A-law from RTP packets (RFC 3551)",
                "hierarchy": [
                    "GstRtpPcmaDepay2",
                    "GstRtpPcmauDepay2",
                    "GstRtpBaseDepay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: 8\n     clock-rate: 8000\napplication/x-rtp:\n          media: audio\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: PCMA\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-alaw:\n       channels: 1\n           rate: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtppcmapay2": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Payload A-law Audio into RTP packets (RFC 3551)",
                "hierarchy": [
                    "GstRtpPcmaPay2",
                    "GstRtpPcmauPay2",
                    "GstRtpBaseAudioPay2",
                    "GstRtpBasePay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-alaw:\n       channels: 1\n           rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: 8\n     clock-rate: 8000\napplication/x-rtp:\n          media: audio\n  encoding-name: PCMA\n     clock-rate: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtppcmudepay2": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Depayload µ-law from RTP packets (RFC 3551)",
                "hierarchy": [
                    "GstRtpPcmuDepay2",
                    "GstRtpPcmauDepay2",
                    "GstRtpBaseDepay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: 0\n     clock-rate: 8000\napplication/x-rtp:\n          media: audio\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: PCMU\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-mulaw:\n       channels: 1\n           rate: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtppcmupay2": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Payload µ-law Audio into RTP packets (RFC 3551)",
                "hierarchy": [
                    "GstRtpPcmuPay2",
                    "GstRtpPcmauPay2",
                    "GstRtpBaseAudioPay2",
                    "GstRtpBasePay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-mulaw:\n       channels: 1\n           rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: 0\n     clock-rate: 8000\napplication/x-rtp:\n          media: audio\n  encoding-name: PCMU\n     clock-rate: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtprecv": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "RTP sessions management (receiver)",
                "hierarchy": [
                    "GstRtpRecv",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Network/RTP/Filter",
                "pad-templates": {
                    "rtcp_sink_%%u": {
                        "caps": "application/x-rtcp:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "rtp_sink_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "rtp_src_%%u_%%u_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "latency": {
                        "blurb": "Amount of ms to buffer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "200",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "rtp-id": {
                        "blurb": "A connection ID shared with a rtpsend element for implementing both sending and receiving using the same RTP context",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "rtp-id",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Statistics about the session",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-rtp2-stats;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    },
                    "timestamping-mode": {
                        "blurb": "Govern how to pick presentation timestamps for packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "skew (2)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstRtpBin2TimestampingMode",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "get-session": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GstRtp2Session",
                        "when": "last"
                    }
                }
            },
            "rtpsend": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "RTP session management (sender)",
                "hierarchy": [
                    "GstRtpSend",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Network/RTP/Filter",
                "pad-templates": {
                    "rtcp_src_%%u": {
                        "caps": "application/x-rtcp:\n",
                        "direction": "src",
                        "presence": "request"
                    },
                    "rtp_sink_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "rtp_src_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "min-rtcp-interval": {
                        "blurb": "Minimum time (in ms) between RTCP reports",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "reduced-size-rtcp": {
                        "blurb": "Use reduced size RTCP. Only has an effect if rtp-profile=avpf",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "rtp-id": {
                        "blurb": "A connection ID shared with a rtprecv element for implementing both sending and receiving using the same RTP context",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "rtp-id",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "rtp-profile": {
                        "blurb": "RTP Profile to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "avp (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstRtpSendProfile",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Statistics about the session",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-rtp2-stats;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    }
                },
                "rank": "none",
                "signals": {
                    "get-session": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GstRtp2Session",
                        "when": "last"
                    }
                }
            },
            "rtpvp8depay2": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Depayload VP8 from RTP packets",
                "hierarchy": [
                    "GstRtpVp8Depay2",
                    "GstRtpBaseDepay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: video\n     clock-rate: 90000\n  encoding-name: { (string)VP8, (string)VP8-DRAFT-IETF-01 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-vp8:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "request-keyframe": {
                        "blurb": "Request new keyframe when packet loss is detected",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "wait-for-keyframe": {
                        "blurb": "Wait for the next keyframe after packet loss",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "rtpvp8pay2": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Payload VP8 as RTP packets",
                "hierarchy": [
                    "GstRtpVp8Pay2",
                    "GstRtpBasePay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-vp8:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: video\n     clock-rate: 90000\n  encoding-name: { (string)VP8, (string)VP8-DRAFT-IETF-01 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "fragmentation-mode": {
                        "blurb": "Fragmentation Mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstRtpVp8Pay2FragmentationMode",
                        "writable": true
                    },
                    "picture-id": {
                        "blurb": "Current Picture ID",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "32767",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": false
                    },
                    "picture-id-mode": {
                        "blurb": "The picture ID mode for payloading",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstRtpVp8Pay2PictureIdMode",
                        "writable": true
                    },
                    "picture-id-offset": {
                        "blurb": "Offset to add to the initial picture-id (-1 = random)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "32767",
                        "min": "-1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "rtpvp9depay2": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Depayload VP9 from RTP packets",
                "hierarchy": [
                    "GstRtpVp9Depay2",
                    "GstRtpBaseDepay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: video\n     clock-rate: 90000\n  encoding-name: { (string)VP9, (string)VP9-DRAFT-IETF-01 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-vp9:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "request-keyframe": {
                        "blurb": "Request new keyframe when packet loss is detected",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "wait-for-keyframe": {
                        "blurb": "Wait for the next keyframe after packet loss",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "rtpvp9pay2": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Payload VP9 as RTP packets",
                "hierarchy": [
                    "GstRtpVp9Pay2",
                    "GstRtpBasePay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-vp9:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: video\n     clock-rate: 90000\n  encoding-name: { (string)VP9, (string)VP9-DRAFT-IETF-01 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "picture-id": {
                        "blurb": "Current Picture ID",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "32767",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": false
                    },
                    "picture-id-mode": {
                        "blurb": "The picture ID mode for payloading",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstRtpVp9Pay2PictureIdMode",
                        "writable": true
                    },
                    "picture-id-offset": {
                        "blurb": "Offset to add to the initial picture-id (-1 = random)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "32767",
                        "min": "-1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "marginal"
            }
        },
        "filename": "gstrsrtp",
        "license": "MPL-2.0",
        "other-types": {
            "GstRtp2Session": {
                "hierarchy": [
                    "GstRtp2Session",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "pt-map": {
                        "blurb": "Mapping of RTP payload type to caps",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-rtp2-pt-map;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    }
                },
                "signals": {
                    "bye-ssrc": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "new-ssrc": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "GstRtpAc3PayAggregateMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Automatic: zero-latency if upstream is live, otherwise aggregate frames until packet is full.",
                        "name": "auto",
                        "value": "-1"
                    },
                    {
                        "desc": "Zero Latency: always send out frames right away, do not wait for more frames to fill a packet.",
                        "name": "zero-latency",
                        "value": "0"
                    },
                    {
                        "desc": "Aggregate: collect audio frames until we have a full packet or the max-ptime limit is hit (if set).",
                        "name": "aggregate",
                        "value": "1"
                    }
                ]
            },
            "GstRtpAmrPayAggregateMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Automatic: zero-latency if upstream is live, otherwise aggregate frames until packet is full.",
                        "name": "auto",
                        "value": "-1"
                    },
                    {
                        "desc": "Zero Latency: always send out frames right away, do not wait for more frames to fill a packet.",
                        "name": "zero-latency",
                        "value": "0"
                    },
                    {
                        "desc": "Aggregate: collect audio frames until we have a full packet or the max-ptime limit is hit (if set).",
                        "name": "aggregate",
                        "value": "1"
                    }
                ]
            },
            "GstRtpBaseAudioPay2": {
                "hierarchy": [
                    "GstRtpBaseAudioPay2",
                    "GstRtpBasePay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "alignment-threshold": {
                        "blurb": "Timestamp alignment threshold in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "40000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "discont-wait": {
                        "blurb": "Window of time in nanoseconds to wait before creating a discontinuity",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-ptime": {
                        "blurb": "Maximum duration of the packet data in ns (-1 = unlimited up to MTU)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "min-ptime": {
                        "blurb": "Minimum duration of the packet data in ns (can't go above MTU)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "ptime-multiple": {
                        "blurb": "Force buffers to be multiples of this duration in ns (0 disables)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    }
                }
            },
            "GstRtpBaseDepay2": {
                "hierarchy": [
                    "GstRtpBaseDepay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "auto-header-extension": {
                        "blurb": "Whether RTP header extensions should be automatically enabled, if an implementation is available",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "extensions": {
                        "blurb": "List of enabled RTP header extensions",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": false
                    },
                    "max-reorder": {
                        "blurb": "Maximum seqnum reorder before assuming sender has restarted",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "100",
                        "max": "32767",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "source-info": {
                        "blurb": "Add RTP source information as buffer metadata",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Various statistics",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-rtp-depayload-stats;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    }
                },
                "signals": {
                    "add-extension": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstRTPHeaderExtension"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "clear-extensions": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "request-extension": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "GstRTPHeaderExtension",
                        "when": "last"
                    }
                }
            },
            "GstRtpBasePay2": {
                "hierarchy": [
                    "GstRtpBasePay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "auto-header-extension": {
                        "blurb": "Whether RTP header extensions should be automatically enabled, if an implementation is available",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "extensions": {
                        "blurb": "List of enabled RTP header extensions",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": false
                    },
                    "mtu": {
                        "blurb": "Maximum size of one RTP packet",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1400",
                        "max": "-1",
                        "min": "28",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "onvif-no-rate-control": {
                        "blurb": "Enable ONVIF Rate-Control=no timestamping mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "pt": {
                        "blurb": "Payload type of the packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "96",
                        "max": "127",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "scale-rtptime": {
                        "blurb": "Whether the RTP timestamp should be scaled with the rate (speed)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "seqnum": {
                        "blurb": "RTP sequence number of the last packet",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "seqnum-offset": {
                        "blurb": "Offset that is added to all RTP sequence numbers (-1 == random)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "65535",
                        "min": "-1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "source-info": {
                        "blurb": "Add RTP source information as buffer metadata",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "ssrc": {
                        "blurb": "SSRC of the packets (-1 == random)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "4294967295",
                        "min": "-1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Various statistics",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-rtp-payload-stats;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    },
                    "timestamp": {
                        "blurb": "RTP timestamp of the last packet",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "timestamp-offset": {
                        "blurb": "Offset that is added to all RTP timestamps (-1 == random)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "4294967295",
                        "min": "-1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    }
                },
                "signals": {
                    "add-extension": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstRTPHeaderExtension"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "clear-extensions": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "request-extension": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "GstRTPHeaderExtension",
                        "when": "last"
                    }
                }
            },
            "GstRtpBin2TimestampingMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Use arrival time as timestamp",
                        "name": "arrival",
                        "value": "0"
                    },
                    {
                        "desc": "Use RTP timestamps as is",
                        "name": "rtp",
                        "value": "1"
                    },
                    {
                        "desc": "Correct skew to synchronize sender and receiver clocks",
                        "name": "skew",
                        "value": "2"
                    }
                ]
            },
            "GstRtpGCCBwEEstimator": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Use Kalman filter",
                        "name": "kalman",
                        "value": "0"
                    },
                    {
                        "desc": "Use linear regression slope",
                        "name": "linear-regression",
                        "value": "1"
                    }
                ]
            },
            "GstRtpLinearAudioDepay": {
                "hierarchy": [
                    "GstRtpLinearAudioDepay",
                    "GstRtpBaseDepay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object"
            },
            "GstRtpLinearAudioPay": {
                "hierarchy": [
                    "GstRtpLinearAudioPay",
                    "GstRtpBaseAudioPay2",
                    "GstRtpBasePay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object"
            },
            "GstRtpMpeg4GenericPayAggregateMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Automatic: zero-latency if upstream is live, otherwise aggregate elementary streams until packet is full.",
                        "name": "auto",
                        "value": "-1"
                    },
                    {
                        "desc": "Zero Latency: always send out elementary streams right away, do not wait for more elementary streams to fill a packet.",
                        "name": "zero-latency",
                        "value": "0"
                    },
                    {
                        "desc": "Aggregate: collect elementary streams until we have a full packet or the max-ptime limit is hit (if set).",
                        "name": "aggregate",
                        "value": "1"
                    }
                ]
            },
            "GstRtpPcmauDepay2": {
                "hierarchy": [
                    "GstRtpPcmauDepay2",
                    "GstRtpBaseDepay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object"
            },
            "GstRtpPcmauPay2": {
                "hierarchy": [
                    "GstRtpPcmauPay2",
                    "GstRtpBaseAudioPay2",
                    "GstRtpBasePay2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object"
            },
            "GstRtpSendProfile": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "AVP profile as specified in RFC 3550",
                        "name": "avp",
                        "value": "0"
                    },
                    {
                        "desc": "AVPF profile as specified in RFC 4585",
                        "name": "avpf",
                        "value": "1"
                    }
                ]
            },
            "GstRtpVp8Pay2FragmentationMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Fit as much into each packet as possible",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "Make sure that every partition starts at the start of a packet",
                        "name": "partition-start",
                        "value": "1"
                    },
                    {
                        "desc": "Create a new packet for every partition",
                        "name": "every-partition",
                        "value": "2"
                    }
                ]
            },
            "GstRtpVp8Pay2PictureIdMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "No Picture ID",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "7-bit PictureID",
                        "name": "7-bit",
                        "value": "1"
                    },
                    {
                        "desc": "15-bit Picture ID",
                        "name": "15-bit",
                        "value": "2"
                    }
                ]
            },
            "GstRtpVp9Pay2PictureIdMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "No Picture ID",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "7-bit PictureID",
                        "name": "7-bit",
                        "value": "1"
                    },
                    {
                        "desc": "15-bit Picture ID",
                        "name": "15-bit",
                        "value": "2"
                    }
                ]
            }
        },
        "package": "gst-plugin-rtp",
        "source": "gst-plugin-rtp",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rsrtsp": {
        "description": "GStreamer RTSP Client Plugin",
        "elements": {
            "rtspsrc2": {
                "author": "Nirbheek Chauhan <nirbheek centricular com>",
                "description": "Receive audio or video from a network device via the Real Time Streaming Protocol (RTSP) (RFC 2326, 7826)",
                "hierarchy": [
                    "GstRtspSrc2",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstURIHandler"
                ],
                "klass": "Source/Network",
                "pad-templates": {
                    "stream_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "location": {
                        "blurb": "RTSP server, credentials and media path, e.g. rtsp://user:p4ssw0rd@camera-5.local:8554/h264_1080p30",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "port-start": {
                        "blurb": "Port number to start allocating client ports for receiving RTP and RTCP data, eg. 3000 (0 = automatic selection)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "protocols": {
                        "blurb": "Allowed lower transport protocols, in order of preference",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "udp-mcast,udp,tcp",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "receive-mtu": {
                        "blurb": "Initial size of buffers to allocate in the buffer pool, will be increased if too small",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1508",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "timeout": {
                        "blurb": "Timeout for network activity, in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5000000000",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstrsrtsp",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-rtsp",
        "source": "gst-plugin-rtsp",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rstracers": {
        "description": "GStreamer Rust tracers plugin",
        "elements": {},
        "filename": "gstrstracers",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-tracers",
        "source": "gst-plugin-tracers",
        "tracers": {
            "buffer-lateness": {
                "hierarchy": [
                    "GstBufferLateness",
                    "GstTracer",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "signals": {
                    "write-log": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "memory-tracer": {
                "hierarchy": [
                    "GstMemoryTracer",
                    "GstTracer",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "properties": {
                    "file": {
                        "blurb": "Path to the file to write memory usage information",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": false,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "signals": {
                    "write-log": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "pad-push-timings": {
                "hierarchy": [
                    "GstPadPushTimings",
                    "GstTracer",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ]
            },
            "pcap-writer": {
                "hierarchy": [
                    "GstPcapWriter",
                    "GstTracer",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "properties": {
                    "fake-protocol": {
                        "blurb": "Protocol to fake in pcap files",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "udp (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstPcapWriterFakeProtocol",
                        "writable": true
                    },
                    "output-dir": {
                        "blurb": "Directory where to save pcap files",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "tracer_pcaps",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "pad-path": {
                        "blurb": "Pad path to target",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "target-factory": {
                        "blurb": "Factory name to target",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                }
            },
            "pipeline-snapshot": {
                "hierarchy": [
                    "GstPipelineSnapshot",
                    "GstTracer",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "properties": {
                    "cleanup-mode": {
                        "blurb": "Cleanup mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (2)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstPipelineSnapshotCleanupMode",
                        "writable": true
                    },
                    "dot-dir": {
                        "blurb": "Directory where to place dot files",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": true,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "dot-pipeline-ptr": {
                        "blurb": "Add pipeline ptr value to dot files",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "dot-prefix": {
                        "blurb": "Prefix for dot files",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "pipeline-snapshot-",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "dot-ts": {
                        "blurb": "Add timestamp to dot files",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "dots-viewer-ws-url": {
                        "blurb": "gst-dots-viewer websocket URL",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": true,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "folder-mode": {
                        "blurb": "How to create folder each time a snapshot of all pipelines is made",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstPipelineSnapshotFolderMode",
                        "writable": true
                    },
                    "xdg-cache": {
                        "blurb": "Use $XDG_CACHE_DIR/gstreamer-dots",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": true,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "signals": {
                    "snapshot": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "queue-levels": {
                "hierarchy": [
                    "GstQueueLevels",
                    "GstTracer",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "signals": {
                    "write-log": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            }
        },
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rsvideofx": {
        "description": "GStreamer Rust Video Effects Plugin",
        "elements": {
            "colordetect": {
                "author": "Philippe Normand <philn@igalia.com>",
                "description": "Detects the dominant color of a video",
                "hierarchy": [
                    "GstColorDetect",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Video",
                "long-name": "Dominant color detection",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { RGB, RGBA, ARGB, BGR, BGRA }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { RGB, RGBA, ARGB, BGR, BGRA }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "max-colors": {
                        "blurb": "Actual colors count can be lower depending on the image",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2",
                        "max": "255",
                        "min": "2",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "quality": {
                        "blurb": "A step in pixels to improve performance",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "10",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "roundedcorners": {
                "author": "Sanchayan Maity <sanchayan@asymptotic.io>",
                "description": "Adds rounded corners to video",
                "hierarchy": [
                    "GstRoundedCorners",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Converter/Video",
                "long-name": "Rounded Corners",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: I420\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { I420, A420 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "border-radius-px": {
                        "blurb": "Draw rounded corners with given border radius",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "videocompare": {
                "author": "Rafael Caricio <rafael@caricio.com>",
                "description": "Compare similarity of video frames",
                "hierarchy": [
                    "GstVideoCompare",
                    "GstVideoAggregator",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Video",
                "long-name": "Image comparison",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "video/x-raw:\n         format: { RGB, RGBA }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstVideoAggregatorPad"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { RGB, RGBA }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always",
                        "type": "GstVideoAggregatorPad"
                    }
                },
                "properties": {
                    "hash-algo": {
                        "blurb": "Which hashing algorithm to use for image comparisons",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "blockhash (4)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstVideoCompareHashAlgorithm",
                        "writable": true
                    },
                    "max-dist-threshold": {
                        "blurb": "Maximum distance threshold to emit messages when an image is detected, by default emits only on exact match",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1.79769e+308",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstrsvideofx",
        "license": "MPL",
        "other-types": {
            "GstVideoCompareHashAlgorithm": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Mean: The Mean hashing algorithm.",
                        "name": "mean",
                        "value": "0"
                    },
                    {
                        "desc": "Gradient: The Gradient hashing algorithm.",
                        "name": "gradient",
                        "value": "1"
                    },
                    {
                        "desc": "VertGradient: The Vertical-Gradient hashing algorithm.",
                        "name": "vertgradient",
                        "value": "2"
                    },
                    {
                        "desc": "DoubleGradient: The Double-Gradient hashing algorithm.",
                        "name": "doublegradient",
                        "value": "3"
                    },
                    {
                        "desc": "Blockhash: The Blockhash (block median value perceptual hash) algorithm.",
                        "name": "blockhash",
                        "value": "4"
                    }
                ]
            }
        },
        "package": "gst-plugin-videofx",
        "source": "gst-plugin-videofx",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rswebp": {
        "description": "GStreamer WebP Plugin",
        "elements": {
            "rswebpdec": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Decodes potentially animated WebP images",
                "hierarchy": [
                    "GstRsWebPDec",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Video",
                "long-name": "WebP decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "image/webp:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstrswebp",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-webp",
        "source": "gst-plugin-webp",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rswebrtc": {
        "description": "GStreamer plugin for high level WebRTC elements and a simple signaling server",
        "elements": {
            "awskvswebrtcsink": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "WebRTC sink with kinesis video streams signaller",
                "hierarchy": [
                    "GstAwsKvsWebRTCSink",
                    "GstBaseWebRTCSink",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstNavigation"
                ],
                "klass": "Sink/Network/WebRTC",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "audio/x-raw:\naudio/x-opus:\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstWebRTCSinkPad"
                    },
                    "video_%%u": {
                        "caps": "video/x-raw:\n\nvideo/x-raw(memory:CUDAMemory):\n\nvideo/x-raw(memory:GLMemory):\n\nvideo/x-raw(memory:NVMM):\n\nvideo/x-raw(memory:D3D11Memory):\nvideo/x-vp8:\nvideo/x-h264:\nvideo/x-vp9:\nvideo/x-h265:\nvideo/x-av1:\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstWebRTCSinkPad"
                    }
                },
                "rank": "none"
            },
            "janusvrwebrtcsink": {
                "author": "Eva Pace <epace@igalia.com>",
                "description": "WebRTC sink with Janus Video Room signaller",
                "hierarchy": [
                    "GstJanusVRWebRTCSink",
                    "GstBaseWebRTCSink",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstNavigation"
                ],
                "klass": "Sink/Network/WebRTC",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "audio/x-raw:\naudio/x-opus:\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstWebRTCSinkPad"
                    },
                    "video_%%u": {
                        "caps": "video/x-raw:\n\nvideo/x-raw(memory:CUDAMemory):\n\nvideo/x-raw(memory:GLMemory):\n\nvideo/x-raw(memory:NVMM):\n\nvideo/x-raw(memory:D3D11Memory):\nvideo/x-vp8:\nvideo/x-h264:\nvideo/x-vp9:\nvideo/x-h265:\nvideo/x-av1:\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstWebRTCSinkPad"
                    }
                },
                "properties": {
                    "janus-state": {
                        "blurb": "The current state of the signaller",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "initialized (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstJanusVRWebRTCJanusState",
                        "writable": false
                    },
                    "use-string-ids": {
                        "blurb": "Use strings instead of u64 for Janus IDs, see strings_ids config option in janus.plugin.videoroom.jcfg",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": true,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "janusvrwebrtcsrc": {
                "author": "Eva Pace <epace@igalia.com>",
                "description": "WebRTC source with Janus Video Room signaller",
                "hierarchy": [
                    "GstJanusVRWebRTCSrc",
                    "GstBaseWebRTCSrc",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstURIHandler"
                ],
                "klass": "Source/Network/WebRTC",
                "pad-templates": {
                    "audio_%%s_%%u": {
                        "caps": "audio/x-raw(ANY):\napplication/x-rtp:\naudio/x-opus:\n",
                        "direction": "src",
                        "presence": "sometimes",
                        "type": "GstWebRTCSrcPad"
                    },
                    "video_%%s_%%u": {
                        "caps": "video/x-raw(ANY):\napplication/x-rtp:\nvideo/x-vp8:\nvideo/x-h264:\nvideo/x-vp9:\nvideo/x-h265:\nvideo/x-av1:\n",
                        "direction": "src",
                        "presence": "sometimes",
                        "type": "GstWebRTCSrcPad"
                    }
                },
                "properties": {
                    "janus-state": {
                        "blurb": "The current state of the signaller",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "initialized (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstJanusVRWebRTCJanusState",
                        "writable": false
                    },
                    "use-string-ids": {
                        "blurb": "Use strings instead of u64 for Janus IDs, see strings_ids config option in janus.plugin.videoroom.jcfg",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": true,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "livekitwebrtcsink": {
                "author": "Olivier Crête <olivier.crete@collabora.com>",
                "description": "WebRTC sink with LiveKit signaller",
                "hierarchy": [
                    "GstLiveKitWebRTCSink",
                    "GstBaseWebRTCSink",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstNavigation"
                ],
                "klass": "Sink/Network/WebRTC",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "audio/x-raw:\naudio/x-opus:\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstWebRTCSinkPad"
                    },
                    "video_%%u": {
                        "caps": "video/x-raw:\n\nvideo/x-raw(memory:CUDAMemory):\n\nvideo/x-raw(memory:GLMemory):\n\nvideo/x-raw(memory:NVMM):\n\nvideo/x-raw(memory:D3D11Memory):\nvideo/x-vp8:\nvideo/x-h264:\nvideo/x-vp9:\nvideo/x-h265:\nvideo/x-av1:\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstWebRTCSinkPad"
                    }
                },
                "rank": "none"
            },
            "livekitwebrtcsrc": {
                "author": "Jordan Yelloz <jordan.yelloz@collabora.com>",
                "description": "WebRTC source with LiveKit signaller",
                "hierarchy": [
                    "GstLiveKitWebRTCSrc",
                    "GstBaseWebRTCSrc",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Source/Network/WebRTC",
                "pad-templates": {
                    "audio_%%s_%%u": {
                        "caps": "audio/x-raw(ANY):\napplication/x-rtp:\naudio/x-opus:\n",
                        "direction": "src",
                        "presence": "sometimes",
                        "type": "GstLiveKitWebRTCSrcPad"
                    },
                    "audio_%%u": {
                        "caps": "audio/x-raw(ANY):\napplication/x-rtp:\naudio/x-opus:\n",
                        "direction": "src",
                        "presence": "sometimes",
                        "type": "GstWebRTCSrcPad"
                    },
                    "video_%%s_%%u": {
                        "caps": "video/x-raw(ANY):\napplication/x-rtp:\nvideo/x-vp8:\nvideo/x-h264:\nvideo/x-vp9:\nvideo/x-h265:\nvideo/x-av1:\n",
                        "direction": "src",
                        "presence": "sometimes",
                        "type": "GstLiveKitWebRTCSrcPad"
                    },
                    "video_%%u": {
                        "caps": "video/x-raw(ANY):\napplication/x-rtp:\nvideo/x-vp8:\nvideo/x-h264:\nvideo/x-vp9:\nvideo/x-h265:\nvideo/x-av1:\n",
                        "direction": "src",
                        "presence": "sometimes",
                        "type": "GstWebRTCSrcPad"
                    }
                },
                "rank": "none"
            },
            "webrtcsink": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "WebRTC sink with custom protocol signaller",
                "hierarchy": [
                    "GstWebRTCSink",
                    "GstBaseWebRTCSink",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstNavigation"
                ],
                "klass": "Sink/Network/WebRTC",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "audio/x-raw:\naudio/x-opus:\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstWebRTCSinkPad"
                    },
                    "video_%%u": {
                        "caps": "video/x-raw:\n\nvideo/x-raw(memory:CUDAMemory):\n\nvideo/x-raw(memory:GLMemory):\n\nvideo/x-raw(memory:NVMM):\n\nvideo/x-raw(memory:D3D11Memory):\nvideo/x-vp8:\nvideo/x-h264:\nvideo/x-vp9:\nvideo/x-h265:\nvideo/x-av1:\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstWebRTCSinkPad"
                    }
                },
                "properties": {
                    "run-signalling-server": {
                        "blurb": "Whether the element should run its own signalling server",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "signalling-server-cert": {
                        "blurb": "Path to TLS certificate the signalling server should use.\n                        The certificate should be formatted as PEM",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "signalling-server-cert-password": {
                        "blurb": "The password for the certificate the signalling server will use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "signalling-server-host": {
                        "blurb": "Address the signalling server should listen on",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.0.0.0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "signalling-server-key": {
                        "blurb": "Path to private encryption key the signalling server should use.\n                        The key should be formatted as PEM",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "signalling-server-port": {
                        "blurb": "Port the signalling server should listen on",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "8443",
                        "max": "65535",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "webrtcsrc": {
                "author": "Thibault Saunier <tsaunier@igalia.com>",
                "description": "WebRTC src",
                "hierarchy": [
                    "GstWebRTCSrc",
                    "GstBaseWebRTCSrc",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstURIHandler"
                ],
                "klass": "Source/Network/WebRTC",
                "long-name": "WebRTCSrc",
                "pad-templates": {
                    "audio_%%s_%%u": {
                        "caps": "audio/x-raw(ANY):\napplication/x-rtp:\naudio/x-opus:\n",
                        "direction": "src",
                        "presence": "sometimes",
                        "type": "GstWebRTCSrcPad"
                    },
                    "audio_%%u": {
                        "caps": "audio/x-raw(ANY):\napplication/x-rtp:\naudio/x-opus:\n",
                        "direction": "src",
                        "presence": "sometimes",
                        "type": "GstWebRTCSrcPad"
                    },
                    "video_%%s_%%u": {
                        "caps": "video/x-raw(ANY):\napplication/x-rtp:\nvideo/x-vp8:\nvideo/x-h264:\nvideo/x-vp9:\nvideo/x-h265:\nvideo/x-av1:\n",
                        "direction": "src",
                        "presence": "sometimes",
                        "type": "GstWebRTCSrcPad"
                    },
                    "video_%%u": {
                        "caps": "video/x-raw(ANY):\napplication/x-rtp:\nvideo/x-vp8:\nvideo/x-h264:\nvideo/x-vp9:\nvideo/x-h265:\nvideo/x-av1:\n",
                        "direction": "src",
                        "presence": "sometimes",
                        "type": "GstWebRTCSrcPad"
                    }
                },
                "properties": {
                    "connect-to-first-producer": {
                        "blurb": "When enabled, automatically connect to the first peer that becomes available if no 'peer-id' is specified.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "whepclientsrc": {
                "author": "Sanchayan Maity <sanchayan@asymptotic.io>",
                "description": "WebRTC source element using WHEP Client as the signaller",
                "hierarchy": [
                    "GstWhepClientSrc",
                    "GstBaseWebRTCSrc",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Source/Network/WebRTC",
                "pad-templates": {
                    "audio_%%s_%%u": {
                        "caps": "audio/x-raw(ANY):\napplication/x-rtp:\naudio/x-opus:\n",
                        "direction": "src",
                        "presence": "sometimes",
                        "type": "GstWebRTCSrcPad"
                    },
                    "video_%%s_%%u": {
                        "caps": "video/x-raw(ANY):\napplication/x-rtp:\nvideo/x-vp8:\nvideo/x-h264:\nvideo/x-vp9:\nvideo/x-h265:\nvideo/x-av1:\n",
                        "direction": "src",
                        "presence": "sometimes",
                        "type": "GstWebRTCSrcPad"
                    }
                },
                "rank": "primary"
            },
            "whipclientsink": {
                "author": "Taruntej Kanakamalla <taruntej@asymptotic.io>",
                "description": "WebRTC sink with WHIP client signaller",
                "hierarchy": [
                    "GstWhipWebRTCSink",
                    "GstBaseWebRTCSink",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstNavigation"
                ],
                "klass": "Sink/Network/WebRTC",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "audio/x-raw:\naudio/x-opus:\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstWebRTCSinkPad"
                    },
                    "video_%%u": {
                        "caps": "video/x-raw:\n\nvideo/x-raw(memory:CUDAMemory):\n\nvideo/x-raw(memory:GLMemory):\n\nvideo/x-raw(memory:NVMM):\n\nvideo/x-raw(memory:D3D11Memory):\nvideo/x-vp8:\nvideo/x-h264:\nvideo/x-vp9:\nvideo/x-h265:\nvideo/x-av1:\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstWebRTCSinkPad"
                    }
                },
                "rank": "none"
            },
            "whipserversrc": {
                "author": "Taruntej Kanakamalla <taruntej@asymptotic.io>",
                "description": "WebRTC source element using WHIP Server as the signaller",
                "hierarchy": [
                    "GstWhipServerSrc",
                    "GstBaseWebRTCSrc",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Source/Network/WebRTC",
                "pad-templates": {
                    "audio_%%s_%%u": {
                        "caps": "audio/x-raw(ANY):\napplication/x-rtp:\naudio/x-opus:\n",
                        "direction": "src",
                        "presence": "sometimes",
                        "type": "GstWebRTCSrcPad"
                    },
                    "audio_%%u": {
                        "caps": "audio/x-raw(ANY):\napplication/x-rtp:\naudio/x-opus:\n",
                        "direction": "src",
                        "presence": "sometimes",
                        "type": "GstWebRTCSrcPad"
                    },
                    "video_%%s_%%u": {
                        "caps": "video/x-raw(ANY):\napplication/x-rtp:\nvideo/x-vp8:\nvideo/x-h264:\nvideo/x-vp9:\nvideo/x-h265:\nvideo/x-av1:\n",
                        "direction": "src",
                        "presence": "sometimes",
                        "type": "GstWebRTCSrcPad"
                    },
                    "video_%%u": {
                        "caps": "video/x-raw(ANY):\napplication/x-rtp:\nvideo/x-vp8:\nvideo/x-h264:\nvideo/x-vp9:\nvideo/x-h265:\nvideo/x-av1:\n",
                        "direction": "src",
                        "presence": "sometimes",
                        "type": "GstWebRTCSrcPad"
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstrswebrtc",
        "license": "MPL-2.0",
        "other-types": {
            "GstBaseWebRTCSink": {
                "hierarchy": [
                    "GstBaseWebRTCSink",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstNavigation"
                ],
                "kind": "object",
                "properties": {
                    "audio-caps": {
                        "blurb": "Governs what audio codecs will be proposed. Valid values: [audio/x-opus; audio/x-raw, format=(string)S24BE, layout=(string)interleaved, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw, format=(string)S16BE, layout=(string)interleaved, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw, format=(string)U8, layout=(string)interleaved, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]]",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "audio/x-opus",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "congestion-control": {
                        "blurb": "Defines how congestion is controlled, if at all",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "gcc (2)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstWebRTCSinkCongestionControl",
                        "writable": true
                    },
                    "do-clock-signalling": {
                        "blurb": "Whether PTP or NTP clock & RTP/clock offset should be signalled according to RFC 7273",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "do-fec": {
                        "blurb": "Whether the element should negotiate and send FEC data",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "do-retransmission": {
                        "blurb": "Whether the element should offer to honor retransmission requests",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "enable-control-data-channel": {
                        "blurb": "Enable receiving arbitrary events through data channel",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "enable-data-channel-navigation": {
                        "blurb": "Enable navigation events through a dedicated WebRTCDataChannel",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "enable-mitigation-modes": {
                        "blurb": "Flags for whether the element should dynamically scale the source resolution and framerate based on the bitrate",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "downsampled+downscaled",
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstWebRTCSinkMitigationMode",
                        "writable": true
                    },
                    "forward-metas": {
                        "blurb": "Comma-separated list of buffer meta names to forward over the control data channel. Currently supported names are: timecode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "ice-transport-policy": {
                        "blurb": "The policy to apply for ICE transport",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "all (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstWebRTCICETransportPolicy",
                        "writable": true
                    },
                    "max-bitrate": {
                        "blurb": "Maximum bitrate to use (in bit/sec) when computing it through the congestion control algorithm",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "8192000",
                        "max": "-1",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "meta": {
                        "blurb": "Free form metadata about the producer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "min-bitrate": {
                        "blurb": "Minimal bitrate to use (in bit/sec) when computing it through the congestion control algorithm",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000",
                        "max": "-1",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "run-web-server": {
                        "blurb": "Whether the element should run a web server",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "signaller": {
                        "blurb": "The Signallable object to use to handle WebRTC Signalling",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstRSWebRTCSignallableIface",
                        "writable": false
                    },
                    "start-bitrate": {
                        "blurb": "Start bitrate to use (in bit/sec)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2048000",
                        "max": "-1",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Statistics for the current consumers",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-webrtcsink-stats;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    },
                    "stun-server": {
                        "blurb": "The STUN server of the form stun://hostname:port",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "stun://stun.l.google.com:19302",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "turn-servers": {
                        "blurb": "The TURN servers of the form <\"turn(s)://username:password@host:port\", \"turn(s)://username1:password1@host1:port1\">",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    },
                    "video-caps": {
                        "blurb": "Governs what video codecs will be proposed. Valid values: [video/x-vp8; video/x-h264; video/x-vp9; video/x-h265; video/x-av1; video/x-raw, format=(string){ RGB, RGBA, BGR, BGRA, AYUV, UYVY, I420, Y41B, UYVP }, width=(int)[ 1, 32767 ], height=(int)[ 1, 32767 ]]",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "video/x-vp8; video/x-h264; video/x-vp9; video/x-h265; video/x-av1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "web-server-cert": {
                        "blurb": "Path to TLS certificate the web server should use.\n                        The certificate should be formatted as PEM",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "web-server-directory": {
                        "blurb": "The directory the web server should serve",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "gstwebrtc-api/dist",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "web-server-host-addr": {
                        "blurb": "Address the web server should listen on",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "http://127.0.0.1:8080/",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "web-server-key": {
                        "blurb": "Path to private encryption key the web server should use.\n                        The key should be formatted as PEM",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "web-server-path": {
                        "blurb": "The root path for the web server",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "signals": {
                    "configure-mitigation-caps": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "GstVideoInfo"
                            },
                            {
                                "name": "arg2",
                                "type": "gint"
                            },
                            {
                                "name": "arg3",
                                "type": "GstWebRTCSinkMitigationMode"
                            }
                        ],
                        "return-type": "GstCaps",
                        "when": "last"
                    },
                    "consumer-added": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "GstElement"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "consumer-pipeline-created": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "GstPipeline"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "consumer-removed": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "GstElement"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "define-encoder-bitrates": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "gint"
                            },
                            {
                                "name": "arg2",
                                "type": "GstStructure"
                            }
                        ],
                        "return-type": "GstStructure",
                        "when": "last"
                    },
                    "encoder-setup": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg2",
                                "type": "GstElement"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "get-sessions": {
                        "action": true,
                        "args": [],
                        "return-type": "GStrv",
                        "when": "last"
                    },
                    "payloader-setup": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg2",
                                "type": "GstElement"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "request-encoded-filter": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg2",
                                "type": "GstCaps"
                            }
                        ],
                        "return-type": "GstElement",
                        "when": "last"
                    }
                }
            },
            "GstBaseWebRTCSrc": {
                "hierarchy": [
                    "GstBaseWebRTCSrc",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "kind": "object",
                "properties": {
                    "audio-codecs": {
                        "blurb": "Names of audio codecs to be be used during the SDP negotiation. Valid values: [OPUS, L24, L16, L8]",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    },
                    "do-retransmission": {
                        "blurb": "Send retransmission events upstream when a packet is late",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "enable-control-data-channel": {
                        "blurb": "Enable sending control requests through a dedicated WebRTCDataChannel",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "enable-data-channel-navigation": {
                        "blurb": "Enable navigation events through a dedicated WebRTCDataChannel",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "meta": {
                        "blurb": "Free form metadata about the consumer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "signaller": {
                        "blurb": "The Signallable object to use to handle WebRTC Signalling",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": true,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRSWebRTCSignallableIface",
                        "writable": true
                    },
                    "stun-server": {
                        "blurb": "The STUN server of the form stun://host:port",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "stun://stun.l.google.com:19302",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "turn-servers": {
                        "blurb": "The TURN servers of the form <\"turn(s)://username:password@host:port\", \"turn(s)://username1:password1@host1:port1\">",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    },
                    "video-codecs": {
                        "blurb": "Names of video codecs to be be used during the SDP negotiation. Valid values: [VP8, H264, VP9, H265, AV1, RAW]",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    }
                },
                "signals": {
                    "request-encoded-filter": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg2",
                                "type": "GstCaps"
                            }
                        ],
                        "return-type": "GstElement",
                        "when": "last"
                    }
                }
            },
            "GstJanusVRWebRTCJanusState": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Initialized",
                        "name": "initialized",
                        "value": "0"
                    },
                    {
                        "desc": "SessionCreated",
                        "name": "session-created",
                        "value": "1"
                    },
                    {
                        "desc": "VideoroomAttached",
                        "name": "videoroom-attached",
                        "value": "2"
                    },
                    {
                        "desc": "RoomJoined",
                        "name": "room-joined",
                        "value": "3"
                    },
                    {
                        "desc": "Negotiating",
                        "name": "negotiating",
                        "value": "4"
                    },
                    {
                        "desc": "WebrtcUp",
                        "name": "webrtc-up",
                        "value": "5"
                    }
                ]
            },
            "GstLiveKitWebRTCSrcPad": {
                "hierarchy": [
                    "GstLiveKitWebRTCSrcPad",
                    "GstWebRTCSrcPad",
                    "GstGhostPad",
                    "GstProxyPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "participant-info": {
                        "blurb": "Participant Information",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    },
                    "participant-sid": {
                        "blurb": "Participant ID",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "track-info": {
                        "blurb": "Track Information",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    },
                    "track-sid": {
                        "blurb": "Track ID",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    }
                },
                "signals": {
                    "set-track-disabled": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gboolean"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "GstRSWebRTCSignallableIface": {
                "hierarchy": [
                    "GstRSWebRTCSignallableIface",
                    "GInterface"
                ],
                "kind": "interface",
                "signals": {
                    "consumer-added": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "GstElement"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "consumer-removed": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "GstElement"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "end-session": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "error": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "handle-ice": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            },
                            {
                                "name": "arg2",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg3",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "munge-session-description": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "GstWebRTCSessionDescription"
                            }
                        ],
                        "return-type": "GstWebRTCSessionDescription",
                        "when": "last"
                    },
                    "producer-added": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "GstStructure"
                            },
                            {
                                "name": "arg2",
                                "type": "gboolean"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "producer-removed": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "GstStructure"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "request-meta": {
                        "args": [],
                        "return-type": "GstStructure",
                        "when": "last"
                    },
                    "send-ice": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg2",
                                "type": "guint"
                            },
                            {
                                "name": "arg3",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "send-session-description": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "GstWebRTCSessionDescription"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "session-description": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "GstWebRTCSessionDescription"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "session-ended": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "session-requested": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg2",
                                "type": "GstWebRTCSessionDescription"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "session-started": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "shutdown": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "start": {
                        "action": true,
                        "args": [],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "stop": {
                        "action": true,
                        "args": [],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "webrtcbin-ready": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "GstElement"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "GstWebRTCSinkCongestionControl": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Disabled: no congestion control is applied",
                        "name": "disabled",
                        "value": "0"
                    },
                    {
                        "desc": "Homegrown: simple sender-side heuristic",
                        "name": "homegrown",
                        "value": "1"
                    },
                    {
                        "desc": "Google Congestion Control algorithm",
                        "name": "gcc",
                        "value": "2"
                    }
                ]
            },
            "GstWebRTCSinkMitigationMode": {
                "kind": "flags",
                "values": [
                    {
                        "desc": "No mitigation applied",
                        "name": "none",
                        "value": "0x00000000"
                    },
                    {
                        "desc": "Lowered resolution",
                        "name": "downscaled",
                        "value": "0x00000001"
                    },
                    {
                        "desc": "Lowered framerate",
                        "name": "downsampled",
                        "value": "0x00000002"
                    }
                ]
            },
            "GstWebRTCSinkPad": {
                "hierarchy": [
                    "GstWebRTCSinkPad",
                    "GstGhostPad",
                    "GstProxyPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "msid": {
                        "blurb": "Remote MediaStream ID in use for this pad",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                }
            },
            "GstWebRTCSrcPad": {
                "hierarchy": [
                    "GstWebRTCSrcPad",
                    "GstGhostPad",
                    "GstProxyPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "msid": {
                        "blurb": "Remote MediaStream ID in use for this pad",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    }
                }
            }
        },
        "package": "gst-plugin-webrtc",
        "source": "gst-plugin-webrtc",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "skia": {
        "description": "GStreamer skia plugin",
        "elements": {
            "skiacompositor": {
                "author": "Thibault Saunier <tsaunier@igalia.com>, Sebastian Dröge <sebastian@centricular.com>",
                "description": "Skia based compositor",
                "hierarchy": [
                    "GstSkiaCompositor",
                    "GstVideoAggregator",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Compositor/Video",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, BGR10x2_LE, RGB10x2_LE, r210, I422_10LE, I422_10BE, NV16_10LE40, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE16, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstSkiaCompositorPad"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { RGBA, BGRA, RGBx, RGB16, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "background": {
                        "blurb": "NULL",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "checker (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstSkiaCompositorBackground",
                        "writable": true
                    }
                },
                "rank": "secondary"
            }
        },
        "filename": "gstskia",
        "license": "MIT/X11",
        "other-types": {
            "GstSkiaCompositorBackground": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Checker",
                        "name": "checker",
                        "value": "0"
                    },
                    {
                        "desc": "Black",
                        "name": "black",
                        "value": "1"
                    },
                    {
                        "desc": "White",
                        "name": "white",
                        "value": "2"
                    },
                    {
                        "desc": "Transparent",
                        "name": "transparent",
                        "value": "3"
                    }
                ]
            },
            "GstSkiaCompositorPad": {
                "hierarchy": [
                    "GstSkiaCompositorPad",
                    "GstVideoAggregatorConvertPad",
                    "GstVideoAggregatorPad",
                    "GstAggregatorPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "alpha": {
                        "blurb": "Alpha value of the input",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "anti-alias": {
                        "blurb": "Whether to use anti-aliasing",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "height": {
                        "blurb": "Height of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "3.40282e+38",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "operator": {
                        "blurb": "Blending operator to use for blending this pad over the previous ones",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "over (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstSkiaCompositorPadOperator",
                        "writable": true
                    },
                    "width": {
                        "blurb": "Width of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "3.40282e+38",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "xpos": {
                        "blurb": "Horizontal position of the input",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "ypos": {
                        "blurb": "Vertical position of the input",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    }
                }
            },
            "GstSkiaCompositorPadOperator": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Source",
                        "name": "source",
                        "value": "0"
                    },
                    {
                        "desc": "Over",
                        "name": "over",
                        "value": "1"
                    },
                    {
                        "desc": "Add",
                        "name": "add",
                        "value": "2"
                    },
                    {
                        "desc": "Dest",
                        "name": "dest",
                        "value": "3"
                    },
                    {
                        "desc": "Clear",
                        "name": "clear",
                        "value": "4"
                    },
                    {
                        "desc": "DestOver",
                        "name": "dest-over",
                        "value": "5"
                    },
                    {
                        "desc": "SourceIn",
                        "name": "source-in",
                        "value": "6"
                    },
                    {
                        "desc": "DestIn",
                        "name": "dest-in",
                        "value": "7"
                    },
                    {
                        "desc": "SourceOut",
                        "name": "source-out",
                        "value": "8"
                    },
                    {
                        "desc": "DestOut",
                        "name": "dest-out",
                        "value": "9"
                    },
                    {
                        "desc": "SourceATop",
                        "name": "source-a-top",
                        "value": "10"
                    },
                    {
                        "desc": "DestATop",
                        "name": "dest-a-top",
                        "value": "11"
                    },
                    {
                        "desc": "Xor",
                        "name": "xor",
                        "value": "12"
                    },
                    {
                        "desc": "Modulate",
                        "name": "modulate",
                        "value": "13"
                    },
                    {
                        "desc": "Screen",
                        "name": "screen",
                        "value": "14"
                    },
                    {
                        "desc": "Overlay",
                        "name": "overlay",
                        "value": "15"
                    },
                    {
                        "desc": "Darken",
                        "name": "darken",
                        "value": "16"
                    },
                    {
                        "desc": "Lighten",
                        "name": "lighten",
                        "value": "17"
                    },
                    {
                        "desc": "ColorDodge",
                        "name": "color-dodge",
                        "value": "18"
                    },
                    {
                        "desc": "ColorBurn",
                        "name": "color-burn",
                        "value": "19"
                    },
                    {
                        "desc": "HardLight",
                        "name": "hard-light",
                        "value": "20"
                    },
                    {
                        "desc": "SoftLight",
                        "name": "soft-light",
                        "value": "21"
                    },
                    {
                        "desc": "Difference",
                        "name": "difference",
                        "value": "22"
                    },
                    {
                        "desc": "Exclusion",
                        "name": "exclusion",
                        "value": "23"
                    },
                    {
                        "desc": "Multiply",
                        "name": "multiply",
                        "value": "24"
                    },
                    {
                        "desc": "Hue",
                        "name": "hue",
                        "value": "25"
                    },
                    {
                        "desc": "Saturation",
                        "name": "saturation",
                        "value": "26"
                    },
                    {
                        "desc": "Color",
                        "name": "color",
                        "value": "27"
                    },
                    {
                        "desc": "Luminosity",
                        "name": "luminosity",
                        "value": "28"
                    }
                ]
            }
        },
        "package": "gst-plugin-skia",
        "source": "gst-plugin-skia",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "sodium": {
        "description": "GStreamer plugin for libsodium-based file encryption and decryption",
        "elements": {
            "sodiumdecrypter": {
                "author": "Jordan Petridis <jordan@centricular.com>",
                "description": "libsodium-based file decrypter",
                "hierarchy": [
                    "GstSodiumDecryptor",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "Decrypter",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-sodium-encrypted:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "receiver-key": {
                        "blurb": "The private key of the Receiver",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GBytes",
                        "writable": true
                    },
                    "sender-key": {
                        "blurb": "The public key of the Sender",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": false,
                        "type": "GBytes",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "sodiumencrypter": {
                "author": "Jordan Petridis <jordan@centricular.com>",
                "description": "libsodium-based file encrypter",
                "hierarchy": [
                    "GstSodiumEncrypter",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "Encrypter",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-sodium-encrypted:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "block-size": {
                        "blurb": "The block-size of the chunks",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "32768",
                        "max": "-1",
                        "min": "1024",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "receiver-key": {
                        "blurb": "The public key of the Receiver",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GBytes",
                        "writable": true
                    },
                    "sender-key": {
                        "blurb": "The private key of the Sender",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": false,
                        "type": "GBytes",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstsodium",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-sodium",
        "source": "gst-plugin-sodium",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "speechmatics": {
        "description": "GStreamer Speechmatics plugin",
        "elements": {
            "speechmaticstranscriber": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Speech to Text filter, using Speechmatics transcribe",
                "hierarchy": [
                    "GstSpeechmaticsTranscriber",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Audio/Text/Filter",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: [ 8000, 48000 ]\n       channels: 1\n         layout: { (string)interleaved, (string)non-interleaved }\n         format: S16LE\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "src",
                        "presence": "always",
                        "type": "GstSpeechmaticsTranscriberSrcPad"
                    },
                    "translate_src_%%u": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "src",
                        "presence": "request",
                        "type": "GstSpeechmaticsTranscriberSrcPad"
                    },
                    "unsynced_src": {
                        "caps": "application/x-json:\n",
                        "direction": "src",
                        "presence": "always"
                    },
                    "unsynced_translate_src_%%u": {
                        "caps": "application/x-json:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "additional-vocabulary": {
                        "blurb": "Additional vocabulary speechmatics should use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    },
                    "api-key": {
                        "blurb": "Speechmatics API Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "diarization": {
                        "blurb": "Defines how to separate speakers in the audio",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstSpeechmaticsTranscriberDiarization",
                        "writable": true
                    },
                    "enable-late-punctuation-hack": {
                        "blurb": "deprecated: speechmatics now appears to group punctuation reliably",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "join-punctuation": {
                        "blurb": "Whether punctuation should be joined with the preceding word",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "language-code": {
                        "blurb": "The Language of the Stream, ISO code",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "en",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Amount of milliseconds to allow for transcription",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "8000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "lateness": {
                        "blurb": "Amount of milliseconds to introduce as lateness",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "mask-profanities": {
                        "blurb": "Mask profanities with * of the same length as the word",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "max-delay": {
                        "blurb": "Max delay to pass to the speechmatics API (0 = use latency)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-observed-delay": {
                        "blurb": "Maximum delay observed between the sending of an audio sample and the reception of an item",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "max-speakers": {
                        "blurb": "The maximum number of speakers that may be detected with diarization=speaker",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "50",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "url": {
                        "blurb": "URL of the transcription server",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "ws://0.0.0.0:9000",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstspeechmatics",
        "license": "Proprietary",
        "other-types": {
            "GstSpeechmaticsTranscriberDiarization": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "None: no diarization",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "Speaker: identify speakers by their voices",
                        "name": "speaker",
                        "value": "1"
                    }
                ]
            },
            "GstSpeechmaticsTranscriberSrcPad": {
                "hierarchy": [
                    "GstSpeechmaticsTranscriberSrcPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "language-code": {
                        "blurb": "The Language the Stream must be translated to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                }
            }
        },
        "package": "gst-plugin-speechmatics",
        "source": "gst-plugin-speechmatics",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "spotify": {
        "description": "GStreamer Spotify Plugin",
        "elements": {
            "spotifyaudiosrc": {
                "author": "Guillaume Desmottes <guillaume@desmottes.be>",
                "description": "Spotify source",
                "hierarchy": [
                    "GstSpotifyAudioSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Source/Audio",
                "long-name": "Spotify source",
                "pad-templates": {
                    "src": {
                        "caps": "application/ogg:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "access-token": {
                        "blurb": "Spotify access token, requires 'streaming' scope",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "bitrate": {
                        "blurb": "Spotify audio bitrate in kbit/s",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "160 (1)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstRsSpotifyBitrate",
                        "writable": true
                    },
                    "cache-credentials": {
                        "blurb": "Directory where to cache Spotify credentials",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "cache-files": {
                        "blurb": "Directory where to cache downloaded files from Spotify",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "cache-max-size": {
                        "blurb": "The max allowed size of the cache, in bytes, or 0 to disable the cache limit",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "password": {
                        "blurb": "Spotify password, Facebook accounts need a device password from https://www.spotify.com/us/account/set-device-password/",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "track": {
                        "blurb": "Spotify track URI, in the form 'spotify:track:$SPOTIFY_ID'",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "username": {
                        "blurb": "Spotify username, Facebook accounts need a device username from https://www.spotify.com/us/account/set-device-password/",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "spotifylyricssrc": {
                "author": "Guillaume Desmottes <guillaume@desmottes.be>",
                "description": "Spotify lyrics source",
                "hierarchy": [
                    "GstSpotifyLyricsSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Text",
                "pad-templates": {
                    "src": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "access-token": {
                        "blurb": "Spotify access token, requires 'streaming' scope",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "background-color": {
                        "blurb": "The background color of the lyrics, in ARGB",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "cache-credentials": {
                        "blurb": "Directory where to cache Spotify credentials",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "cache-files": {
                        "blurb": "Directory where to cache downloaded files from Spotify",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "cache-max-size": {
                        "blurb": "The max allowed size of the cache, in bytes, or 0 to disable the cache limit",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "highlight-text-color": {
                        "blurb": "The text color of the highlighted lyrics, in ARGB",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "text-color": {
                        "blurb": "The text color of the lyrics, in ARGB",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "track": {
                        "blurb": "Spotify track URI, in the form 'spotify:track:$SPOTIFY_ID'",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstspotify",
        "license": "MPL",
        "other-types": {
            "GstRsSpotifyBitrate": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "96 kbit/s",
                        "name": "96",
                        "value": "0"
                    },
                    {
                        "desc": "160 kbit/s",
                        "name": "160",
                        "value": "1"
                    },
                    {
                        "desc": "320 kbit/s",
                        "name": "320",
                        "value": "2"
                    }
                ]
            }
        },
        "package": "gst-plugin-spotify",
        "source": "gst-plugin-spotify",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "streamgrouper": {
        "description": "Filter element that makes all the incoming streams share a group-id",
        "elements": {
            "streamgrouper": {
                "author": "Alicia Boya García <aboya@igalia.com>",
                "description": "Modifies all input streams to use the same group-id",
                "hierarchy": [
                    "GstStreamGrouper",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gststreamgrouper",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-streamgrouper",
        "source": "gst-plugin-streamgrouper",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "textaccumulate": {
        "description": "GStreamer Plugin for accumulating words into sentences",
        "elements": {
            "textaccumulate": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Accumulates text",
                "hierarchy": [
                    "GstTextAccumulate",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Text/Filter",
                "pad-templates": {
                    "sink": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "drain-on-final-transcripts": {
                        "blurb": "whether the element should entirely drain itself when receiving rstranscribe/final-transcript events",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "drain-on-speaker-change": {
                        "blurb": "whether the element should entirely drain itself when receiving rstranscribe/speaker-change events",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "extend-duration": {
                        "blurb": "whether the element should extend the duration of an item to match the start time of the next non-drained item, if any. This is useful when a speech synthesis element is further downstream.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "extended-duration-gap": {
                        "blurb": "Amount of milliseconds to preserve between items when extend-duration is true",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "500",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Amount of milliseconds to allow for accumulating",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "3000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "lateness": {
                        "blurb": "By how many milliseconds to shift input timestamps forward for accumulating",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "timeout-terminators": {
                        "blurb": "A regex for finding preferred break points when draining on timeout",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "\\,\\s|\\:\\s|\\;\\s",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gsttextaccumulate",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-textaccumulate",
        "source": "gst-plugin-textaccumulate",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "textahead": {
        "description": "GStreamer Plugin for displaying upcoming text buffers ahead of time",
        "elements": {
            "textahead": {
                "author": "Guillaume Desmottes <guillaume@desmottes.be>",
                "description": "Display upcoming text buffers ahead",
                "hierarchy": [
                    "GstTextAhead",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Text/Filter",
                "long-name": "Text Ahead",
                "pad-templates": {
                    "sink": {
                        "caps": "text/x-raw:\n         format: { utf8, pango-markup }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "text/x-raw:\n         format: pango-markup\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "ahead-attributes": {
                        "blurb": "Pango span attributes to set on the ahead text",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "size=\"smaller\"",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "buffer-start-segment": {
                        "blurb": "Generate a buffer at the start of the segment with ahead text",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "current-attributes": {
                        "blurb": "Pango span attributes to set on the text from the current buffer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "size=\"larger\"",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "n-ahead": {
                        "blurb": "The number of ahead text buffers to display along with the current one",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "-1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "n-previous": {
                        "blurb": "The number of previous text buffers to display before the current one",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "previous-attributes": {
                        "blurb": "Pango span attributes to set on the previous text",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "size=\"smaller\"",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "separator": {
                        "blurb": "Text inserted between each text buffers",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "\n",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gsttextahead",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-textahead",
        "source": "gst-plugin-textahead",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "textwrap": {
        "description": "GStreamer Text Wrap Plugin",
        "elements": {
            "textwrap": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Breaks text into fixed-size lines, with optional hyphenation",
                "hierarchy": [
                    "GstTextWrap",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Text/Filter",
                "long-name": "Text Wrapper",
                "pad-templates": {
                    "sink": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "accumulate-time": {
                        "blurb": "Cut-off time for input text accumulation (0=do not accumulate)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "columns": {
                        "blurb": "Maximum number of columns for any given line",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "32",
                        "max": "-1",
                        "min": "1",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "dictionary": {
                        "blurb": "Path to a dictionary to load at runtime to perform hyphenation, see <https://docs.rs/crate/hyphenation/0.7.1> for more information",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "lines": {
                        "blurb": "Split input buffer into output buffers with max lines (0=do not split)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gsttextwrap",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-textwrap",
        "source": "gst-plugin-textwrap",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "threadshare": {
        "description": "GStreamer Threadshare Plugin",
        "elements": {
            "ts-appsrc": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Thread-sharing app source",
                "hierarchy": [
                    "GstTsAppSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Generic",
                "long-name": "Thread-sharing app source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "caps": {
                        "blurb": "Caps to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "context": {
                        "blurb": "Context name to share threads with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "context-wait": {
                        "blurb": "Throttle poll loop to run at most once every this many ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "do-timestamp": {
                        "blurb": "Timestamp buffers with the current running time on arrival",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "max-buffers": {
                        "blurb": "Maximum number of buffers to queue up",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "-1",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "end-of-stream": {
                        "action": true,
                        "args": [],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "push-buffer": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstBuffer"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    }
                }
            },
            "ts-audiotestsrc": {
                "author": "François Laignel <fengalin@free.fr>",
                "description": "Thread-sharing audio test source",
                "hierarchy": [
                    "TsAudioTestSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Test",
                "pad-templates": {
                    "src": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: { S16LE, S16BE, U16LE, U16BE, S32LE, S32BE, U32LE, U32BE, F32LE, F32BE, F64LE, F64BE, S8, U8 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "buffer-duration": {
                        "blurb": "Buffer duration in ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "context": {
                        "blurb": "Context name to share threads with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "context-wait": {
                        "blurb": "Throttle poll loop to run at most once every this many ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "do-timestamp": {
                        "blurb": "Apply current stream time to buffers",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "freq": {
                        "blurb": "Frequency",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "440",
                        "max": "-1",
                        "min": "1",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "is-live": {
                        "blurb": "(Pseudo) live output",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "mute": {
                        "blurb": "Mute",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "num-buffers": {
                        "blurb": "Number of buffers to output before sending EOS (-1 = unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "samples-per-buffer": {
                        "blurb": "Number of samples per output buffer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1024",
                        "max": "-1",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "volume": {
                        "blurb": "Output volume",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.8",
                        "max": "10",
                        "min": "-1.79769e+308",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "ts-blocking-adapter": {
                "author": "François Laignel <francois@centricular.com>",
                "description": "Converts a blocking downstream branch into an async backpressure",
                "hierarchy": [
                    "GstTsBlockingAdapter",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            },
            "ts-input-selector": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Simple input selector element",
                "hierarchy": [
                    "GstTsInputSelector",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "Thread-sharing input selector",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "active-pad": {
                        "blurb": "Currently active pad",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstPad",
                        "writable": true
                    },
                    "context": {
                        "blurb": "Context name to share threads with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "context-wait": {
                        "blurb": "Throttle poll loop to run at most once every this many ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "ts-intersink": {
                "author": "François Laignel <francois@centricular.com>",
                "description": "Thread-sharing inter-pipelines sink",
                "hierarchy": [
                    "GstTsInterSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Sink/Generic",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "inter-context": {
                        "blurb": "Context name of the inter elements to share with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": true,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "ts-intersrc": {
                "author": "François Laignel <francois@centricular.com>",
                "description": "Thread-sharing inter-pipelines source",
                "hierarchy": [
                    "GstTsInterSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Generic",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "context": {
                        "blurb": "Context name to share threads with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": true,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "context-wait": {
                        "blurb": "Throttle poll loop to run at most once every this many ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": true,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "current-level-buffers": {
                        "blurb": "Current number of buffers in the queue",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "current-level-bytes": {
                        "blurb": "Current amount of data in the queue (bytes)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "current-level-time": {
                        "blurb": "Current amount of data in the queue (in ns)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "inter-context": {
                        "blurb": "Context name of the inter elements to share with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "max-size-buffers": {
                        "blurb": "Maximum number of buffers to queue (0=unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": true,
                        "controllable": false,
                        "default": "200",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-size-bytes": {
                        "blurb": "Maximum number of bytes to queue (0=unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": true,
                        "controllable": false,
                        "default": "1048576",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-size-time": {
                        "blurb": "Maximum number of nanoseconds to queue (0=unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": true,
                        "controllable": false,
                        "default": "1000000000",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "ts-jitterbuffer": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Simple jitterbuffer",
                "hierarchy": [
                    "GstTsJitterBuffer",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "Thread-sharing jitterbuffer",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "context": {
                        "blurb": "Context name to share threads with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "context-wait": {
                        "blurb": "Throttle poll loop to run at most once every this many ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "do-lost": {
                        "blurb": "Send an event downstream when a packet is lost",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Amount of ms to buffer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "200",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-dropout-time": {
                        "blurb": "The maximum time (milliseconds) of missing packets tolerated.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "60000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-misorder-time": {
                        "blurb": "The maximum time (milliseconds) of misordered packets tolerated.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Various statistics",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-rtp-jitterbuffer-stats, num-pushed=(guint64)0, num-lost=(guint64)0, num-late=(guint64)0;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    }
                },
                "rank": "none",
                "signals": {
                    "clear-pt-map": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "request-pt-map": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GstCaps",
                        "when": "last"
                    }
                }
            },
            "ts-proxysink": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Thread-sharing proxy sink",
                "hierarchy": [
                    "GstTsProxySink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Sink/Generic",
                "long-name": "Thread-sharing proxy sink",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "proxy-context": {
                        "blurb": "Context name of the proxy to share with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "ts-proxysrc": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Thread-sharing proxy source",
                "hierarchy": [
                    "GstTsProxySrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Generic",
                "long-name": "Thread-sharing proxy source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "context": {
                        "blurb": "Context name to share threads with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "context-wait": {
                        "blurb": "Throttle poll loop to run at most once every this many ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "current-level-buffers": {
                        "blurb": "Current number of buffers in the queue",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "current-level-bytes": {
                        "blurb": "Current amount of data in the queue (bytes)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "current-level-time": {
                        "blurb": "Current amount of data in the queue (in ns)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "max-size-buffers": {
                        "blurb": "Maximum number of buffers to queue (0=unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "200",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-size-bytes": {
                        "blurb": "Maximum number of bytes to queue (0=unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1048576",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-size-time": {
                        "blurb": "Maximum number of nanoseconds to queue (0=unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000000000",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "proxy-context": {
                        "blurb": "Context name of the proxy to share with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "ts-queue": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Simple data queue",
                "hierarchy": [
                    "GstTsQueue",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "Thread-sharing queue",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "context": {
                        "blurb": "Context name to share threads with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "context-wait": {
                        "blurb": "Throttle poll loop to run at most once every this many ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "current-level-buffers": {
                        "blurb": "Current number of buffers in the queue",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "current-level-bytes": {
                        "blurb": "Current amount of data in the queue (bytes)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "current-level-time": {
                        "blurb": "Current amount of data in the queue (in ns)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "max-size-buffers": {
                        "blurb": "Maximum number of buffers to queue (0=unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "200",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-size-bytes": {
                        "blurb": "Maximum number of bytes to queue (0=unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1048576",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-size-time": {
                        "blurb": "Maximum number of nanoseconds to queue (0=unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000000000",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "ts-rtpdtmfsrc": {
                "author": "François Laignel <francois@centricular.com>",
                "description": "Thread-sharing RTP DTMF packet (RFC2833) source",
                "hierarchy": [
                    "GstTsRTPDTMFSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Network/RTP",
                "pad-templates": {
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: [ 0, 2147483647 ]\n  encoding-name: TELEPHONE-EVENT\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "clock-rate": {
                        "blurb": "The clock-rate at which to generate DTMF packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "8000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "context": {
                        "blurb": "Context name to share threads with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": true,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "context-wait": {
                        "blurb": "Throttle poll loop to run at most once every this many ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": true,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "packet-redundancy": {
                        "blurb": "Number of packets to send to indicate start and stop DTMF events",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "5",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "pt": {
                        "blurb": "The payload type of the packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "96",
                        "max": "128",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "seqnum": {
                        "blurb": "The RTP Sequence number of the last processed packet",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "seqnum-offset": {
                        "blurb": "Offset to add to all outgoing seqnum (-1 => random)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "65535",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "ssrc": {
                        "blurb": "The SSRC of the packets (-1 => random)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "4294967295",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "timestamp": {
                        "blurb": "The RTP timestamp of the last processed packet",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "timestamp-offset": {
                        "blurb": "Offset to add to all outgoing timestamps (-1 = random)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "4294967295",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "ts-tcpclientsrc": {
                "author": "Sebastian Dröge <sebastian@centricular.com>, LEE Dongjun <redongjun@gmail.com>",
                "description": "Receives data over the network via TCP",
                "hierarchy": [
                    "GstTsTcpClientSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Network",
                "long-name": "Thread-sharing TCP client source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "blocksize": {
                        "blurb": "Size in bytes to read per buffer (-1 = default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4096",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "caps": {
                        "blurb": "Caps to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "context": {
                        "blurb": "Context name to share threads with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "context-wait": {
                        "blurb": "Throttle poll loop to run at most once every this many ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "host": {
                        "blurb": "The host IP address to receive packets from",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "127.0.0.1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "port": {
                        "blurb": "Port to receive packets from",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4953",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "ts-udpsink": {
                "author": "Mathieu <mathieu@centricular.com>",
                "description": "Thread-sharing UDP sink",
                "hierarchy": [
                    "GstTsUdpSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Sink/Network",
                "long-name": "Thread-sharing UDP sink",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "auto-multicast": {
                        "blurb": "Automatically join/leave the multicast groups, FALSE means user has to do it himself",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "bind-address": {
                        "blurb": "Address to bind the socket to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.0.0.0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "bind-address-v6": {
                        "blurb": "Address to bind the V6 socket to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "::",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "bind-port": {
                        "blurb": "Port to bind the socket to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "bind-port-v6": {
                        "blurb": "Port to bind the V6 socket to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "clients": {
                        "blurb": "A comma separated list of host:port pairs with destinations",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "127.0.0.1:5004",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "context": {
                        "blurb": "Context name to share threads with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "context-wait": {
                        "blurb": "Throttle poll loop to run at most once every this many ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "loop": {
                        "blurb": "Set the multicast loop parameter.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "multicast-iface": {
                        "blurb": "The network interface on which to join the multicast group. (Supports only single interface)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "qos-dscp": {
                        "blurb": "Quality of Service, differentiated services code point (-1 default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "63",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "socket": {
                        "blurb": "Socket to use for UDP transmission. (None == allocate)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GSocket",
                        "writable": true
                    },
                    "socket-v6": {
                        "blurb": "IPV6 Socket to use for UDP transmission. (None == allocate)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GSocket",
                        "writable": true
                    },
                    "sync": {
                        "blurb": "Sync on the clock",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "ttl": {
                        "blurb": "Used for setting the unicast TTL parameter",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "64",
                        "max": "255",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "ttl-mc": {
                        "blurb": "Used for setting the multicast TTL parameter",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "255",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "used-socket": {
                        "blurb": "Socket currently in use for UDP transmission. (None = no socket)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GSocket",
                        "writable": false
                    },
                    "used-socket-v6": {
                        "blurb": "V6 Socket currently in use for UDP transmission. (None = no socket)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GSocket",
                        "writable": false
                    }
                },
                "rank": "none",
                "signals": {
                    "add": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "clear": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "remove": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "ts-udpsrc": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Receives data over the network via UDP",
                "hierarchy": [
                    "GstTsUdpSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Network",
                "long-name": "Thread-sharing UDP source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "address": {
                        "blurb": "Address/multicast group to listen on",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.0.0.0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "buffer-size": {
                        "blurb": "Size of the kernel receive buffer in bytes, 0=default",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "caps": {
                        "blurb": "Caps to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "context": {
                        "blurb": "Context name to share threads with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "context-wait": {
                        "blurb": "Throttle poll loop to run at most once every this many ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "loop": {
                        "blurb": "Set the multicast loop parameter",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "mtu": {
                        "blurb": "Maximum expected packet size. This directly defines the allocation size of the receive buffer pool",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1492",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "multicast-iface": {
                        "blurb": "The network interface on which to join the multicast group. This allows multiple interfaces\n                        separated by comma. (\"eth0,eth1\")",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "port": {
                        "blurb": "Port to listen on",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5004",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "retrieve-sender-address": {
                        "blurb": "Whether to retrieve the sender address and add it to buffers as meta. Disabling this might result in minor performance improvements in certain scenarios",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "reuse": {
                        "blurb": "Allow reuse of the port",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "socket": {
                        "blurb": "Socket to use for UDP reception. (None == allocate)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GSocket",
                        "writable": true
                    },
                    "used-socket": {
                        "blurb": "Socket currently in use for UDP reception. (None = no socket)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GSocket",
                        "writable": false
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstthreadshare",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-threadshare",
        "source": "gst-plugin-threadshare",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "togglerecord": {
        "description": "GStreamer Toggle Record Plugin",
        "elements": {
            "togglerecord": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Valve that ensures multiple streams start/end at the same time. If the input comes from a live stream, when not recording it will be dropped. If it comes from a non-live stream, when not recording it will be blocked.",
                "hierarchy": [
                    "GstToggleRecord",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "Toggle Record",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "sink_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    },
                    "src_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "is-live": {
                        "blurb": "Live output mode: no \"gap eating\", forward incoming segment for live input, create a gap to fill the paused duration for non-live input",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "record": {
                        "blurb": "Enable/disable recording",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "recording": {
                        "blurb": "Whether recording is currently taking place",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": false
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gsttogglerecord",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-togglerecord",
        "source": "gst-plugin-togglerecord",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "uriplaylistbin": {
        "description": "GStreamer Playlist Playback Plugin",
        "elements": {
            "uriplaylistbin": {
                "author": "Guillaume Desmottes <guillaume.desmottes@onestream.live>",
                "description": "Sequentially play uri streams",
                "hierarchy": [
                    "GstUriPlaylistBin",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic/Source",
                "long-name": "Playlist Source",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "text_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "video_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "cache": {
                        "blurb": "Cache playlist items from the network to disk so they are downloaded only once when playing multiple iterations.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "cache-dir": {
                        "blurb": "The directory where playlist items are downloaded to, if 'cache' is enabled. If not set (default), the XDG cache directory is used.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "current-iteration": {
                        "blurb": "The index of the current playlist iteration, or 0 if the iterations property is 0 (unlimited playlist)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "current-uri-index": {
                        "blurb": "The index from the uris property of the current URI being played",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "iterations": {
                        "blurb": "Number of time the playlist items should be played each (0 = unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "-1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "uris": {
                        "blurb": "URIs of the medias to play",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GStrv",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gsturiplaylistbin",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-uriplaylistbin",
        "source": "gst-plugin-uriplaylistbin",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "vvdec": {
        "description": "GStreamer VVdeC VVC/H.266 decoder plugin",
        "elements": {
            "vvdec": {
                "author": "Carlos Bentzen <cadubentzen@igalia.com>",
                "description": "Decode VVC/H.266 video streams with VVdeC",
                "hierarchy": [
                    "GstVVdeC",
                    "GstVideoDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Video",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-h266:\n  stream-format: byte-stream\n      alignment: au\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { GRAY8, I420, Y42B, Y444, GRAY10_LE16, I420_10LE, I422_10LE, Y444_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "n-parser-threads": {
                        "blurb": "Number of parser threads to use while decoding (set to -1 to let libvvdec choose the number of parser threads, set to 0 to parse on the element streaming thread)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "n-threads": {
                        "blurb": "Number of threads to use while decoding (set to -1 to use the number of logical cores, set to 0 to decode in a single thread)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "secondary"
            }
        },
        "filename": "gstvvdec",
        "license": "MPL-2.0",
        "other-types": {},
        "package": "gst-plugin-vvdec",
        "source": "gst-plugin-vvdec",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "webrtchttp": {
        "description": "GStreamer WebRTC Plugin for WebRTC HTTP protocols (WHIP/WHEP)",
        "elements": {
            "whepsrc": {
                "author": "Sanchayan Maity <sanchayan@asymptotic.io>",
                "description": "A bin to stream media using the WebRTC HTTP Egress Protocol (WHEP)",
                "hierarchy": [
                    "GstWhepSrc",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Source/Network/WebRTC",
                "long-name": "WHEP Source Bin",
                "pad-templates": {
                    "src_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "audio-caps": {
                        "blurb": "Governs what audio codecs will be proposed",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-rtp, media=(string)audio, encoding-name=(string)OPUS, payload=(int)96, clock-rate=(int)48000",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "auth-token": {
                        "blurb": "Authentication token to use, will be sent in the HTTP Header as 'Bearer <auth-token>'",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "ice-transport-policy": {
                        "blurb": "The policy to apply for ICE transport",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "all (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRsWebRTCICETransportPolicy",
                        "writable": true
                    },
                    "stun-server": {
                        "blurb": "The STUN server of the form stun://hostname:port",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "timeout": {
                        "blurb": "Value in seconds to timeout WHEP endpoint requests (0 = No timeout).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15",
                        "max": "3600",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "turn-server": {
                        "blurb": "The TURN server of the form turn(s)://username:password@host:port.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "use-link-headers": {
                        "blurb": "Use link headers to configure STUN/TURN servers if present in WHEP endpoint response.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "video-caps": {
                        "blurb": "Governs what video codecs will be proposed",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-rtp, media=(string)video, payload=(int)101, encoding-name=(string)VP8, clock-rate=(int)90000; application/x-rtp, media=(string)video, payload=(int)102, encoding-name=(string)VP9, clock-rate=(int)90000; application/x-rtp, media=(string)video, payload=(int)103, encoding-name=(string)H264, clock-rate=(int)90000; application/x-rtp, media=(string)video, payload=(int)104, encoding-name=(string)H265, clock-rate=(int)90000; application/x-rtp, media=(string)video, payload=(int)105, encoding-name=(string)AV1, clock-rate=(int)90000",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "whep-endpoint": {
                        "blurb": "The WHEP server endpoint to POST SDP offer to.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "whipsink": {
                "author": "Taruntej Kanakamalla <taruntej@asymptotic.io>",
                "description": "A bin to stream RTP media using the WebRTC HTTP Ingestion Protocol (WHIP)",
                "hierarchy": [
                    "GstWhipSink",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Sink/Network/WebRTC",
                "long-name": "WHIP Sink Bin",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "request"
                    }
                },
                "properties": {
                    "auth-token": {
                        "blurb": "Authentication token to use, will be sent in the HTTP Header as 'Bearer <auth-token>'",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "ice-transport-policy": {
                        "blurb": "The policy to apply for ICE transport",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "all (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRsWebRTCICETransportPolicy",
                        "writable": true
                    },
                    "stun-server": {
                        "blurb": "The STUN server of the form stun://hostname:port",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "timeout": {
                        "blurb": "Value in seconds to timeout WHIP endpoint requests (0 = No timeout).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15",
                        "max": "3600",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "turn-server": {
                        "blurb": "The TURN server of the form turn(s)://username:password@host:port.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "use-link-headers": {
                        "blurb": "Use link headers to configure ice-servers from the WHIP server response to the POST request.\n                        If set to TRUE and the WHIP server returns valid ice-servers,\n                        this property overrides the ice-servers values set using the stun-server and turn-server properties.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "whip-endpoint": {
                        "blurb": "The WHIP server endpoint to POST SDP offer to.\n                        e.g.: https://example.com/whip/endpoint/room1234",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "marginal"
            }
        },
        "filename": "gstwebrtchttp",
        "license": "MPL",
        "other-types": {
            "GstRsWebRTCICETransportPolicy": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "All: get both STUN and TURN candidate pairs",
                        "name": "all",
                        "value": "0"
                    },
                    {
                        "desc": "Relay: get only TURN candidate pairs",
                        "name": "relay",
                        "value": "1"
                    }
                ]
            }
        },
        "package": "gst-plugin-webrtchttp",
        "source": "gst-plugin-webrtchttp",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    }
}